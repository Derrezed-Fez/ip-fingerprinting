[2023-03-23 14:54:34] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:54:34] INFO: Testing url https://www.khoshamoz.ir iteration 1
[2023-03-23 14:54:49] INFO: https://www.khoshamoz.ir TTFB: 1.26s DOMContentLoaded: 2.89s firstPaint: 2.09s FCP: 2.09s LCP: 2.30s Load: 3.28s CLS:0.0421
[2023-03-23 14:54:50] INFO: Testing url https://www.khoshamoz.ir iteration 2
[2023-03-23 14:55:05] INFO: https://www.khoshamoz.ir TTFB: 1.63s DOMContentLoaded: 3.24s firstPaint: 2.46s FCP: 2.46s LCP: 2.66s Load: 3.75s CLS:0.0415
[2023-03-23 14:55:05] INFO: Testing url https://www.khoshamoz.ir iteration 3
[2023-03-23 14:55:20] INFO: https://www.khoshamoz.ir TTFB: 1.80s DOMContentLoaded: 3.47s firstPaint: 2.63s FCP: 2.63s LCP: 2.84s Load: 4.36s CLS:0.0417
[2023-03-23 14:55:20] INFO: https://www.khoshamoz.ir 66 requests, TTFB: 1.63s (σ226.00ms 14.5%), firstPaint: 2.46s (σ224.00ms 9.3%), FCP: 2.46s (σ224.00ms 9.3%), DOMContentLoaded: 3.24s (σ236.00ms 7.4%), LCP: 2.66s (σ223.00ms 8.6%), CLS: 0.0417 (σ0.00 0.6%), TBT: 0ms (σ0.00ms 0%), Load: 3.75s (σ441.00ms 11.6%) (3 runs)
[2023-03-23 14:55:20] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\khoshamoz.ir\Chrome\2023-03-23_14-54-33
[2023-03-23 14:55:21] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:55:23] INFO: Testing url https://www.khoshamoz.ir iteration 1
[2023-03-23 14:55:36] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:55:39] INFO: https://www.khoshamoz.ir TTFB: 1.67s DOMContentLoaded: 3.19s firstPaint: 2.55s FCP: 2.75s Load: 4.01s 
[2023-03-23 14:55:42] INFO: Testing url https://www.khoshamoz.ir iteration 2
[2023-03-23 14:55:55] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:55:58] INFO: https://www.khoshamoz.ir TTFB: 1.25s DOMContentLoaded: 3.97s firstPaint: 2.67s FCP: 2.82s Load: 4.56s 
[2023-03-23 14:56:00] INFO: Testing url https://www.khoshamoz.ir iteration 3
[2023-03-23 14:56:12] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:56:16] INFO: https://www.khoshamoz.ir TTFB: 1.46s DOMContentLoaded: 2.99s firstPaint: 2.31s FCP: 2.55s Load: 3.94s 
[2023-03-23 14:56:16] INFO: https://www.khoshamoz.ir 68 requests, TTFB: 1.46s (σ169.00ms 11.6%), firstPaint: 2.55s (σ148.00ms 5.9%), FCP: 2.75s (σ113.00ms 4.2%), DOMContentLoaded: 3.19s (σ420.00ms 12.4%), Load: 4.01s (σ275.00ms 6.6%) (3 runs)
[2023-03-23 14:56:16] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\khoshamoz.ir\Firefox\2023-03-23_14-55-20
[2023-03-23 14:56:17] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:56:17] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:56:17] INFO: Testing url https://www.khoshamoz.ir iteration 1
[2023-03-23 14:56:32] INFO: https://www.khoshamoz.ir TTFB: 1.86s DOMContentLoaded: 3.50s firstPaint: 2.64s FCP: 2.64s LCP: 3.01s Load: 4.31s CLS:0.0573
[2023-03-23 14:56:32] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:56:33] INFO: Testing url https://www.khoshamoz.ir iteration 2
[2023-03-23 14:56:48] INFO: https://www.khoshamoz.ir TTFB: 1.24s DOMContentLoaded: 2.90s firstPaint: 2.03s FCP: 2.03s LCP: 2.29s Load: 3.29s CLS:0.0577
[2023-03-23 14:56:48] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:56:48] INFO: Testing url https://www.khoshamoz.ir iteration 3
[2023-03-23 14:57:03] INFO: https://www.khoshamoz.ir TTFB: 1.22s DOMContentLoaded: 2.87s firstPaint: 2.03s FCP: 2.03s LCP: 2.29s Load: 3.39s CLS:0.0577
[2023-03-23 14:57:03] INFO: https://www.khoshamoz.ir 66 requests, TTFB: 1.24s (σ295.00ms 20.5%), firstPaint: 2.03s (σ286.00ms 12.8%), FCP: 2.03s (σ286.00ms 12.8%), DOMContentLoaded: 2.90s (σ289.00ms 9.4%), LCP: 2.29s (σ337.00ms 13.3%), CLS: 0.0577 (σ0.00 0.4%), TBT: 0ms (σ0.00ms 0%), Load: 3.39s (σ459.00ms 12.5%) (3 runs)
[2023-03-23 14:57:03] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\khoshamoz.ir\Edge\2023-03-23_14-56-16
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
[2023-03-23 14:57:05] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:57:06] INFO: Testing url https://www.helpsaude.com iteration 1
[2023-03-23 14:57:18] INFO: https://www.helpsaude.com TTFB: 192ms DOMContentLoaded: 387ms firstPaint: 367ms FCP: 367ms LCP: 458ms Load: 1.06s CLS:0.0004
[2023-03-23 14:57:18] INFO: Testing url https://www.helpsaude.com iteration 2
[2023-03-23 14:57:30] INFO: https://www.helpsaude.com TTFB: 468ms DOMContentLoaded: 635ms firstPaint: 635ms FCP: 635ms LCP: 711ms Load: 1.25s CLS:0.0004
[2023-03-23 14:57:31] INFO: Testing url https://www.helpsaude.com iteration 3
[2023-03-23 14:57:43] INFO: https://www.helpsaude.com TTFB: 283ms DOMContentLoaded: 446ms firstPaint: 432ms FCP: 432ms LCP: 520ms Load: 1.49s CLS:0.0004
[2023-03-23 14:57:43] INFO: https://www.helpsaude.com 66 requests, TTFB: 283ms (σ115.00ms 36.5%), firstPaint: 432ms (σ114.00ms 23.9%), FCP: 432ms (σ114.00ms 23.9%), DOMContentLoaded: 446ms (σ106.00ms 21.6%), LCP: 520ms (σ108.00ms 19.1%), CLS: 0.0004 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.25s (σ177.00ms 14.0%) (3 runs)
[2023-03-23 14:57:43] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\helpsaude.com\Chrome\2023-03-23_14-57-04
[2023-03-23 14:57:44] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:57:46] INFO: Testing url https://www.helpsaude.com iteration 1
[2023-03-23 14:58:04] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:58:09] INFO: https://www.helpsaude.com TTFB: 295ms DOMContentLoaded: 1.04s firstPaint: 1.02s FCP: 1.02s Load: 9.40s 
[2023-03-23 14:58:12] INFO: Testing url https://www.helpsaude.com iteration 2
[2023-03-23 14:58:30] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:58:34] INFO: https://www.helpsaude.com TTFB: 360ms DOMContentLoaded: 2.57s firstPaint: 2.52s FCP: 2.51s Load: 9.08s 
[2023-03-23 14:58:37] INFO: Testing url https://www.helpsaude.com iteration 3
[2023-03-23 14:58:53] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:58:57] INFO: https://www.helpsaude.com TTFB: 216ms DOMContentLoaded: 1.30s firstPaint: 1.28s FCP: 1.28s Load: 7.42s 
[2023-03-23 14:58:57] INFO: https://www.helpsaude.com 143 requests, TTFB: 295ms (σ59.00ms 20.3%), firstPaint: 1.28s (σ656.00ms 40.8%), FCP: 1.28s (σ650.00ms 40.6%), DOMContentLoaded: 1.30s (σ668.00ms 40.7%), Load: 9.08s (σ868.00ms 10.1%) (3 runs)
[2023-03-23 14:58:57] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\helpsaude.com\Firefox\2023-03-23_14-57-43
[2023-03-23 14:58:58] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:58:58] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:58:59] INFO: Testing url https://www.helpsaude.com iteration 1
[2023-03-23 14:59:11] INFO: https://www.helpsaude.com TTFB: 195ms DOMContentLoaded: 372ms firstPaint: 372ms FCP: 372ms LCP: 446ms Load: 996ms CLS:0.0004
[2023-03-23 14:59:11] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:59:12] INFO: Testing url https://www.helpsaude.com iteration 2
[2023-03-23 14:59:23] INFO: https://www.helpsaude.com TTFB: 174ms DOMContentLoaded: 381ms firstPaint: 329ms FCP: 329ms LCP: 432ms Load: 1.11s CLS:0.0004
[2023-03-23 14:59:23] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:59:24] INFO: Testing url https://www.helpsaude.com iteration 3
[2023-03-23 14:59:38] INFO: https://www.helpsaude.com TTFB: 171ms DOMContentLoaded: 363ms firstPaint: 330ms FCP: 330ms LCP: 374ms Load: 1.87s CLS:0.0004
[2023-03-23 14:59:38] INFO: https://www.helpsaude.com 66 requests, TTFB: 174ms (σ11.00ms 5.9%), firstPaint: 330ms (σ20.00ms 5.8%), FCP: 330ms (σ20.00ms 5.8%), DOMContentLoaded: 372ms (σ7.00ms 2.0%), LCP: 432ms (σ31.00ms 7.5%), CLS: 0.0004 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.11s (σ387.00ms 29.2%) (3 runs)
[2023-03-23 14:59:38] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\helpsaude.com\Edge\2023-03-23_14-58-57
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
[2023-03-23 14:59:40] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:59:41] INFO: Testing url https://www.pcwintech.com iteration 1
[2023-03-23 14:59:54] INFO: https://www.pcwintech.com TTFB: 842ms DOMContentLoaded: 1.02s firstPaint: 1.03s FCP: 1.03s LCP: 1.03s Load: 2.08s CLS:0.1305
[2023-03-23 14:59:55] INFO: Testing url https://www.pcwintech.com iteration 2
[2023-03-23 15:00:07] INFO: https://www.pcwintech.com TTFB: 410ms DOMContentLoaded: 565ms firstPaint: 570ms FCP: 570ms LCP: 570ms Load: 1.12s CLS:0.1305
[2023-03-23 15:00:08] INFO: Testing url https://www.pcwintech.com iteration 3
[2023-03-23 15:00:20] INFO: https://www.pcwintech.com TTFB: 259ms DOMContentLoaded: 403ms firstPaint: 408ms FCP: 408ms LCP: 408ms Load: 992ms CLS:0.1305
[2023-03-23 15:00:20] INFO: https://www.pcwintech.com 46 requests, TTFB: 410ms (σ247.00ms 49.1%), firstPaint: 570ms (σ265.00ms 39.6%), FCP: 570ms (σ265.00ms 39.6%), DOMContentLoaded: 565ms (σ263.00ms 39.7%), LCP: 570ms (σ265.00ms 39.6%), CLS: 0.1305 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.12s (σ484.00ms 34.6%) (3 runs)
[2023-03-23 15:00:20] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\pcwintech.com\Chrome\2023-03-23_14-59-39
[2023-03-23 15:00:21] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 15:00:22] INFO: Testing url https://www.pcwintech.com iteration 1
[2023-03-23 15:00:37] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:00:43] INFO: https://www.pcwintech.com TTFB: 258ms DOMContentLoaded: 514ms firstPaint: 590ms FCP: 583ms Load: 6.29s 
[2023-03-23 15:00:46] INFO: Testing url https://www.pcwintech.com iteration 2
[2023-03-23 15:01:02] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:01:06] INFO: https://www.pcwintech.com TTFB: 685ms DOMContentLoaded: 1.30s firstPaint: 1.43s FCP: 1.42s Load: 7.24s 
[2023-03-23 15:01:08] INFO: Testing url https://www.pcwintech.com iteration 3
[2023-03-23 15:01:24] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:01:31] INFO: https://www.pcwintech.com TTFB: 317ms DOMContentLoaded: 557ms firstPaint: 600ms FCP: 583ms Load: 6.88s 
[2023-03-23 15:01:31] INFO: https://www.pcwintech.com 119 requests, TTFB: 317ms (σ189.00ms 45.0%), firstPaint: 600ms (σ393.00ms 45.0%), FCP: 583ms (σ393.00ms 45.6%), DOMContentLoaded: 557ms (σ360.00ms 45.6%), Load: 6.88s (σ389.00ms 5.7%) (3 runs)
[2023-03-23 15:01:31] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\pcwintech.com\Firefox\2023-03-23_15-00-20
[2023-03-23 15:01:32] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 15:01:32] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:01:33] INFO: Testing url https://www.pcwintech.com iteration 1
[2023-03-23 15:01:45] INFO: https://www.pcwintech.com TTFB: 294ms DOMContentLoaded: 447ms firstPaint: 436ms FCP: 436ms LCP: 460ms Load: 1.36s TBT: 5ms CLS:0.1349
[2023-03-23 15:01:45] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:01:46] INFO: Testing url https://www.pcwintech.com iteration 2
[2023-03-23 15:01:58] INFO: https://www.pcwintech.com TTFB: 382ms DOMContentLoaded: 612ms firstPaint: 600ms FCP: 600ms LCP: 618ms Load: 1.25s CLS:0.1728
[2023-03-23 15:01:58] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:01:59] INFO: Testing url https://www.pcwintech.com iteration 3
[2023-03-23 15:02:11] INFO: https://www.pcwintech.com TTFB: 324ms DOMContentLoaded: 474ms firstPaint: 461ms FCP: 461ms LCP: 479ms Load: 1.10s CLS:0.1728
[2023-03-23 15:02:11] INFO: https://www.pcwintech.com 35 requests, TTFB: 324ms (σ37.00ms 11.0%), firstPaint: 461ms (σ72.00ms 14.5%), FCP: 461ms (σ72.00ms 14.5%), DOMContentLoaded: 474ms (σ72.00ms 14.1%), LCP: 479ms (σ70.00ms 13.6%), CLS: 0.1728 (σ0.02 11.2%), TBT: 0ms (σ2.00ms 141.4%), Load: 1.25s (σ106.00ms 8.6%) (3 runs)
[2023-03-23 15:02:11] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\pcwintech.com\Edge\2023-03-23_15-01-31
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
[2023-03-23 15:02:14] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 15:02:14] INFO: Testing url https://www.nwfdailynews.com iteration 1
[2023-03-23 15:02:29] INFO: https://www.nwfdailynews.com TTFB: 567ms DOMContentLoaded: 728ms firstPaint: 736ms FCP: 736ms LCP: 736ms Load: 2.69s TBT: 83ms CLS:0.0948
[2023-03-23 15:02:29] INFO: Testing url https://www.nwfdailynews.com iteration 2
[2023-03-23 15:02:44] INFO: https://www.nwfdailynews.com TTFB: 123ms DOMContentLoaded: 301ms firstPaint: 302ms FCP: 302ms LCP: 313ms Load: 2.20s TBT: 132ms CLS:0.0948
[2023-03-23 15:02:44] INFO: Testing url https://www.nwfdailynews.com iteration 3
[2023-03-23 15:03:04] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 15:03:08] INFO: https://www.nwfdailynews.com TTFB: 179ms DOMContentLoaded: 341ms firstPaint: 362ms FCP: 362ms LCP: 362ms Load: 16.98s TBT: 84ms CLS:0.0948
[2023-03-23 15:03:08] INFO: https://www.nwfdailynews.com 370 requests, TTFB: 179ms (σ197.00ms 68.2%), firstPaint: 362ms (σ192.00ms 41.1%), FCP: 362ms (σ192.00ms 41.1%), DOMContentLoaded: 341ms (σ193.00ms 42.2%), LCP: 362ms (σ189.00ms 40.2%), CLS: 0.0948 (σ0.00 0%), TBT: 84ms (σ23.00ms 22.9%), Load: 2.69s (σ6.85s 94.0%) (3 runs)
[2023-03-23 15:03:08] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\nwfdailynews.com\Chrome\2023-03-23_15-02-13
[2023-03-23 15:03:09] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 15:03:11] INFO: Testing url https://www.nwfdailynews.com iteration 1
[2023-03-23 15:03:31] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 15:03:32] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:03:47] INFO: https://www.nwfdailynews.com TTFB: 289ms DOMContentLoaded: 640ms firstPaint: 593ms FCP: 583ms Load: 19.20s 
[2023-03-23 15:03:50] INFO: Testing url https://www.nwfdailynews.com iteration 2
[2023-03-23 15:04:10] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 15:04:15] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:04:30] INFO: https://www.nwfdailynews.com TTFB: 134ms DOMContentLoaded: 830ms firstPaint: 819ms FCP: 816ms Load: 25.67s 
[2023-03-23 15:04:32] INFO: Testing url https://www.nwfdailynews.com iteration 3
[2023-03-23 15:04:52] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 15:04:57] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:05:12] INFO: https://www.nwfdailynews.com TTFB: 369ms DOMContentLoaded: 787ms firstPaint: 730ms FCP: 726ms Load: 26.91s 
[2023-03-23 15:05:12] INFO: https://www.nwfdailynews.com 448 requests, TTFB: 289ms (σ98.00ms 37.0%), firstPaint: 730ms (σ93.00ms 13.0%), FCP: 726ms (σ96.00ms 13.5%), DOMContentLoaded: 787ms (σ81.00ms 10.8%), Load: 25.67s (σ3.38s 14.1%) (3 runs)
[2023-03-23 15:05:12] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\nwfdailynews.com\Firefox\2023-03-23_15-03-08
[2023-03-23 15:05:14] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 15:05:14] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:05:14] INFO: Testing url https://www.nwfdailynews.com iteration 1
[2023-03-23 15:05:29] INFO: https://www.nwfdailynews.com TTFB: 146ms DOMContentLoaded: 315ms firstPaint: 314ms FCP: 314ms LCP: 337ms Load: 2.24s TBT: 60ms CLS:0.0948
[2023-03-23 15:05:29] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:05:29] INFO: Testing url https://www.nwfdailynews.com iteration 2
[2023-03-23 15:05:44] INFO: https://www.nwfdailynews.com TTFB: 216ms DOMContentLoaded: 402ms firstPaint: 404ms FCP: 404ms LCP: 423ms Load: 2.36s TBT: 50ms CLS:0.0948
[2023-03-23 15:05:44] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:05:44] INFO: Testing url https://www.nwfdailynews.com iteration 3
[2023-03-23 15:05:58] INFO: https://www.nwfdailynews.com TTFB: 137ms DOMContentLoaded: 313ms firstPaint: 311ms FCP: 311ms LCP: 322ms Load: 2.48s TBT: 67ms CLS:0.0948
[2023-03-23 15:05:58] INFO: https://www.nwfdailynews.com 351 requests, TTFB: 146ms (σ35.00ms 21.2%), firstPaint: 314ms (σ43.00ms 12.6%), FCP: 314ms (σ43.00ms 12.6%), DOMContentLoaded: 315ms (σ41.00ms 12.1%), LCP: 337ms (σ44.00ms 12.3%), CLS: 0.0948 (σ0.00 0%), TBT: 60ms (σ7.00ms 11.8%), Load: 2.36s (σ99.00ms 4.2%) (3 runs)
[2023-03-23 15:05:58] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\nwfdailynews.com\Edge\2023-03-23_15-05-12
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
[2023-03-23 15:06:00] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 15:06:01] INFO: Testing url https://www.abhirupmukherjee.com iteration 1
[2023-03-23 15:06:13] INFO: https://www.abhirupmukherjee.com TTFB: 583ms DOMContentLoaded: 893ms firstPaint: 837ms FCP: 837ms LCP: 940ms Load: 1.09s CLS:0.4067
[2023-03-23 15:06:14] INFO: Testing url https://www.abhirupmukherjee.com iteration 2
[2023-03-23 15:06:26] INFO: https://www.abhirupmukherjee.com TTFB: 215ms DOMContentLoaded: 500ms firstPaint: 448ms FCP: 448ms LCP: 554ms Load: 648ms CLS:0.4119
[2023-03-23 15:06:27] INFO: Testing url https://www.abhirupmukherjee.com iteration 3
[2023-03-23 15:06:39] INFO: https://www.abhirupmukherjee.com TTFB: 222ms DOMContentLoaded: 513ms firstPaint: 461ms FCP: 461ms LCP: 555ms Load: 688ms CLS:0.4067
[2023-03-23 15:06:39] INFO: https://www.abhirupmukherjee.com 35 requests, TTFB: 222ms (σ172.00ms 50.5%), firstPaint: 461ms (σ180.00ms 31.0%), FCP: 461ms (σ180.00ms 31.0%), DOMContentLoaded: 513ms (σ182.00ms 28.7%), LCP: 555ms (σ182.00ms 26.6%), CLS: 0.4067 (σ0.00 0.6%), TBT: 0ms (σ0.00ms 0%), Load: 688ms (σ201.00ms 24.9%) (3 runs)
[2023-03-23 15:06:39] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\abhirupmukherjee.com\Chrome\2023-03-23_15-05-59
[2023-03-23 15:06:40] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 15:06:43] INFO: Testing url https://www.abhirupmukherjee.com iteration 1
[2023-03-23 15:06:54] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:06:59] INFO: https://www.abhirupmukherjee.com TTFB: 303ms DOMContentLoaded: 990ms firstPaint: 959ms FCP: 916ms Load: 1.56s 
[2023-03-23 15:07:02] INFO: Testing url https://www.abhirupmukherjee.com iteration 2
[2023-03-23 15:07:11] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:07:17] INFO: https://www.abhirupmukherjee.com TTFB: 305ms DOMContentLoaded: 1.01s firstPaint: 992ms FCP: 981ms Load: 1.54s 
[2023-03-23 15:07:19] INFO: Testing url https://www.abhirupmukherjee.com iteration 3
[2023-03-23 15:07:29] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:07:34] INFO: https://www.abhirupmukherjee.com TTFB: 214ms DOMContentLoaded: 979ms firstPaint: 947ms FCP: 915ms Load: 1.52s 
[2023-03-23 15:07:34] INFO: https://www.abhirupmukherjee.com 39 requests, TTFB: 303ms (σ42.00ms 15.5%), firstPaint: 959ms (σ19.00ms 2.0%), FCP: 916ms (σ31.00ms 3.3%), DOMContentLoaded: 990ms (σ12.00ms 1.2%), Load: 1.54s (σ18.00ms 1.2%) (3 runs)
[2023-03-23 15:07:35] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\abhirupmukherjee.com\Firefox\2023-03-23_15-06-39
[2023-03-23 15:07:36] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 15:07:36] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:07:36] INFO: Testing url https://www.abhirupmukherjee.com iteration 1
[2023-03-23 15:07:49] INFO: https://www.abhirupmukherjee.com TTFB: 234ms DOMContentLoaded: 557ms firstPaint: 462ms FCP: 462ms LCP: 612ms Load: 713ms CLS:0.4067
[2023-03-23 15:07:49] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:07:49] INFO: Testing url https://www.abhirupmukherjee.com iteration 2
[2023-03-23 15:08:02] INFO: https://www.abhirupmukherjee.com TTFB: 226ms DOMContentLoaded: 556ms firstPaint: 469ms FCP: 469ms LCP: 620ms Load: 719ms CLS:0.4067
[2023-03-23 15:08:02] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:08:02] INFO: Testing url https://www.abhirupmukherjee.com iteration 3
[2023-03-23 15:08:15] INFO: https://www.abhirupmukherjee.com TTFB: 270ms DOMContentLoaded: 558ms firstPaint: 471ms FCP: 471ms LCP: 613ms Load: 709ms CLS:0.4067
[2023-03-23 15:08:15] INFO: https://www.abhirupmukherjee.com 35 requests, TTFB: 234ms (σ19.00ms 7.9%), firstPaint: 469ms (σ4.00ms 0.8%), FCP: 469ms (σ4.00ms 0.8%), DOMContentLoaded: 557ms (σ1.00ms 0.1%), LCP: 613ms (σ4.00ms 0.6%), CLS: 0.4067 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 713ms (σ4.00ms 0.6%) (3 runs)
[2023-03-23 15:08:15] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\abhirupmukherjee.com\Edge\2023-03-23_15-07-35
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
[2023-03-23 15:08:17] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 15:08:18] INFO: Testing url https://www.thaqalain.ir iteration 1
[2023-03-23 15:08:32] INFO: https://www.thaqalain.ir TTFB: 1.60s DOMContentLoaded: 1.62s firstPaint: 1.63s FCP: 1.63s LCP: 1.63s Load: 1.62s 
[2023-03-23 15:08:32] INFO: Testing url https://www.thaqalain.ir iteration 2
[2023-03-23 15:08:45] INFO: https://www.thaqalain.ir TTFB: 1.50s DOMContentLoaded: 1.51s firstPaint: 1.51s FCP: 1.51s LCP: 1.51s Load: 1.51s 
[2023-03-23 15:08:45] INFO: Testing url https://www.thaqalain.ir iteration 3
[2023-03-23 15:08:58] INFO: https://www.thaqalain.ir TTFB: 1.44s DOMContentLoaded: 1.45s firstPaint: 1.45s FCP: 1.45s LCP: 1.45s Load: 1.45s 
[2023-03-23 15:08:58] INFO: https://www.thaqalain.ir 1 requests, TTFB: 1.50s (σ66.00ms 4.4%), firstPaint: 1.51s (σ75.00ms 4.9%), FCP: 1.51s (σ75.00ms 4.9%), DOMContentLoaded: 1.51s (σ71.00ms 4.7%), LCP: 1.51s (σ75.00ms 4.9%), CLS: 0 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.51s (σ71.00ms 4.7%) (3 runs)
[2023-03-23 15:08:58] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\thaqalain.ir\Chrome\2023-03-23_15-08-16
[2023-03-23 15:08:59] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 15:09:01] INFO: Testing url https://www.thaqalain.ir iteration 1
[2023-03-23 15:09:21] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 15:09:21] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:09:31] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 15:09:31] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 15:09:34] INFO: https://www.thaqalain.ir 
[2023-03-23 15:09:36] INFO: Testing url https://www.thaqalain.ir iteration 2
[2023-03-23 15:09:56] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 15:09:56] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:10:06] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 15:10:06] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 15:10:09] INFO: https://www.thaqalain.ir 
[2023-03-23 15:10:11] INFO: Testing url https://www.thaqalain.ir iteration 3
[2023-03-23 15:10:31] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 15:10:31] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 15:10:41] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 15:10:41] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 15:10:44] INFO: https://www.thaqalain.ir 
[2023-03-23 15:10:44] INFO: https://www.thaqalain.ir 
[2023-03-23 15:10:44] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\thaqalain.ir\Firefox\2023-03-23_15-08-58
[2023-03-23 15:10:45] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 15:10:45] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:10:46] INFO: Testing url https://www.thaqalain.ir iteration 1
[2023-03-23 15:10:58] INFO: https://www.thaqalain.ir TTFB: 1.42s DOMContentLoaded: 1.43s firstPaint: 1.45s FCP: 1.45s LCP: 1.45s Load: 1.43s 
[2023-03-23 15:10:58] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:10:59] INFO: Testing url https://www.thaqalain.ir iteration 2
[2023-03-23 15:11:13] INFO: https://www.thaqalain.ir TTFB: 1.73s DOMContentLoaded: 1.75s firstPaint: 1.75s FCP: 1.75s LCP: 1.75s Load: 1.75s 
[2023-03-23 15:11:13] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 15:11:13] INFO: Testing url https://www.thaqalain.ir iteration 3
[2023-03-23 15:11:27] INFO: https://www.thaqalain.ir TTFB: 2.44s DOMContentLoaded: 2.45s firstPaint: 2.47s FCP: 2.47s LCP: 2.47s Load: 2.45s 
[2023-03-23 15:11:27] INFO: https://www.thaqalain.ir 1 requests, TTFB: 1.73s (σ426.00ms 22.9%), firstPaint: 1.75s (σ427.00ms 22.6%), FCP: 1.75s (σ427.00ms 22.6%), DOMContentLoaded: 1.75s (σ426.00ms 22.7%), LCP: 1.75s (σ427.00ms 22.6%), CLS: 0 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.75s (σ426.00ms 22.7%) (3 runs)
[2023-03-23 15:11:27] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\thaqalain.ir\Edge\2023-03-23_15-10-44
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
[2023-03-23 15:11:29] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 15:11:30] INFO: Testing url https://www.educoins.io iteration 1
