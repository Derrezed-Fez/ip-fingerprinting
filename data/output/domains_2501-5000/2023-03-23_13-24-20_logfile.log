[2023-03-23 13:24:21] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 13:24:22] INFO: Testing url https://www.khoshamoz.ir iteration 1
[2023-03-23 13:24:40] INFO: https://www.khoshamoz.ir TTFB: 4.38s DOMContentLoaded: 6.09s firstPaint: 5.28s FCP: 5.28s LCP: 5.66s Load: 7.01s CLS:0.0352
[2023-03-23 13:24:41] INFO: Testing url https://www.khoshamoz.ir iteration 2
[2023-03-23 13:24:56] INFO: https://www.khoshamoz.ir TTFB: 2.06s DOMContentLoaded: 3.65s firstPaint: 2.91s FCP: 2.91s LCP: 3.12s Load: 4.43s CLS:0.0421
[2023-03-23 13:24:57] INFO: Testing url https://www.khoshamoz.ir iteration 3
[2023-03-23 13:25:12] INFO: https://www.khoshamoz.ir TTFB: 2.21s DOMContentLoaded: 3.78s firstPaint: 3.04s FCP: 3.04s LCP: 3.27s Load: 4.57s CLS:0.6199
[2023-03-23 13:25:12] INFO: https://www.khoshamoz.ir 66 requests, TTFB: 2.21s (σ1.06s 36.8%), firstPaint: 3.04s (σ1.09s 29.1%), FCP: 3.04s (σ1.09s 29.1%), DOMContentLoaded: 3.78s (σ1.12s 24.9%), LCP: 3.27s (σ1.16s 28.9%), CLS: 0.0421 (σ0.27 117.9%), TBT: 0ms (σ0.00ms 0%), Load: 4.57s (σ1.19s 22.2%) (3 runs)
[2023-03-23 13:25:12] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\khoshamoz.ir\Chrome\2023-03-23_13-24-20
[2023-03-23 13:25:14] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 13:25:16] INFO: Testing url https://www.khoshamoz.ir iteration 1
[2023-03-23 13:25:29] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:25:35] INFO: https://www.khoshamoz.ir TTFB: 1.93s DOMContentLoaded: 4.04s firstPaint: 2.97s FCP: 3.07s Load: 4.66s 
[2023-03-23 13:25:37] INFO: Testing url https://www.khoshamoz.ir iteration 2
[2023-03-23 13:25:52] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:25:58] INFO: https://www.khoshamoz.ir TTFB: 2.24s DOMContentLoaded: 4.50s firstPaint: 3.24s FCP: 3.52s Load: 5.29s 
[2023-03-23 13:26:00] INFO: Testing url https://www.khoshamoz.ir iteration 3
[2023-03-23 13:26:13] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:26:19] INFO: https://www.khoshamoz.ir TTFB: 1.68s DOMContentLoaded: 3.42s firstPaint: 2.55s FCP: 2.95s Load: 4.35s 
[2023-03-23 13:26:19] INFO: https://www.khoshamoz.ir 67 requests, TTFB: 1.93s (σ229.00ms 11.7%), firstPaint: 2.97s (σ283.00ms 9.7%), FCP: 3.07s (σ245.00ms 7.7%), DOMContentLoaded: 4.04s (σ443.00ms 11.1%), Load: 4.66s (σ393.00ms 8.2%) (3 runs)
[2023-03-23 13:26:19] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\khoshamoz.ir\Firefox\2023-03-23_13-25-13
[2023-03-23 13:26:20] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 13:26:20] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:26:21] INFO: Testing url https://www.khoshamoz.ir iteration 1
[2023-03-23 13:26:35] INFO: https://www.khoshamoz.ir TTFB: 1.46s DOMContentLoaded: 3.12s firstPaint: 2.29s FCP: 2.29s LCP: 2.55s Load: 3.84s CLS:0.0447
[2023-03-23 13:26:35] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:26:36] INFO: Testing url https://www.khoshamoz.ir iteration 2
[2023-03-23 13:26:51] INFO: https://www.khoshamoz.ir TTFB: 1.39s DOMContentLoaded: 3.21s firstPaint: 2.32s FCP: 2.32s LCP: 2.74s Load: 3.93s CLS:0.0455
[2023-03-23 13:26:51] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:26:52] INFO: Testing url https://www.khoshamoz.ir iteration 3
[2023-03-23 13:27:07] INFO: https://www.khoshamoz.ir TTFB: 1.51s DOMContentLoaded: 3.15s firstPaint: 2.31s FCP: 2.31s LCP: 2.59s Load: 3.55s TBT: 1ms CLS:0.0447
[2023-03-23 13:27:07] INFO: https://www.khoshamoz.ir 66 requests, TTFB: 1.46s (σ50.00ms 3.4%), firstPaint: 2.31s (σ13.00ms 0.6%), FCP: 2.31s (σ13.00ms 0.6%), DOMContentLoaded: 3.15s (σ38.00ms 1.2%), LCP: 2.59s (σ81.00ms 3.1%), CLS: 0.0447 (σ0.00 0.9%), TBT: 0ms (σ0.00ms 0%), Load: 3.84s (σ163.00ms 4.3%) (3 runs)
[2023-03-23 13:27:07] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\khoshamoz.ir\Edge\2023-03-23_13-26-19
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 13:27:09] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 13:27:10] INFO: Testing url https://www.helpsaude.com iteration 1
[2023-03-23 13:27:22] INFO: https://www.helpsaude.com TTFB: 208ms DOMContentLoaded: 506ms firstPaint: 507ms FCP: 507ms LCP: 585ms Load: 1.21s CLS:0.0004
[2023-03-23 13:27:23] INFO: Testing url https://www.helpsaude.com iteration 2
[2023-03-23 13:27:36] INFO: https://www.helpsaude.com TTFB: 203ms DOMContentLoaded: 400ms firstPaint: 401ms FCP: 401ms LCP: 450ms Load: 1.82s CLS:0.0004
[2023-03-23 13:27:37] INFO: Testing url https://www.helpsaude.com iteration 3
[2023-03-23 13:27:50] INFO: https://www.helpsaude.com TTFB: 246ms DOMContentLoaded: 575ms firstPaint: 538ms FCP: 538ms LCP: 615ms Load: 1.55s TBT: 100ms CLS:0.0004
[2023-03-23 13:27:50] INFO: https://www.helpsaude.com 66 requests, TTFB: 208ms (σ19.00ms 8.8%), firstPaint: 507ms (σ59.00ms 12.2%), FCP: 507ms (σ59.00ms 12.2%), DOMContentLoaded: 506ms (σ72.00ms 14.6%), LCP: 585ms (σ72.00ms 13.0%), CLS: 0.0004 (σ0.00 0%), TBT: 0ms (σ47.00ms 141.4%), Load: 1.55s (σ252.00ms 16.5%) (3 runs)
[2023-03-23 13:27:50] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\helpsaude.com\Chrome\2023-03-23_13-27-08
[2023-03-23 13:27:53] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 13:27:57] INFO: Testing url https://www.helpsaude.com iteration 1
[2023-03-23 13:28:11] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:28:15] INFO: https://www.helpsaude.com TTFB: 153ms DOMContentLoaded: 978ms firstPaint: 935ms FCP: 933ms Load: 5.95s 
[2023-03-23 13:28:17] INFO: Testing url https://www.helpsaude.com iteration 2
[2023-03-23 13:28:32] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:28:38] INFO: https://www.helpsaude.com TTFB: 129ms DOMContentLoaded: 634ms firstPaint: 606ms FCP: 600ms Load: 5.50s 
[2023-03-23 13:28:42] INFO: Testing url https://www.helpsaude.com iteration 3
[2023-03-23 13:28:57] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:29:03] INFO: https://www.helpsaude.com TTFB: 151ms DOMContentLoaded: 818ms firstPaint: 801ms FCP: 799ms Load: 7.32s 
[2023-03-23 13:29:03] INFO: https://www.helpsaude.com 133 requests, TTFB: 151ms (σ11.00ms 7.5%), firstPaint: 801ms (σ135.00ms 17.3%), FCP: 799ms (σ137.00ms 17.6%), DOMContentLoaded: 818ms (σ141.00ms 17.4%), Load: 5.95s (σ774.00ms 12.4%) (3 runs)
[2023-03-23 13:29:03] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\helpsaude.com\Firefox\2023-03-23_13-27-50
[2023-03-23 13:29:04] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 13:29:04] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:29:05] INFO: Testing url https://www.helpsaude.com iteration 1
[2023-03-23 13:29:18] INFO: https://www.helpsaude.com TTFB: 301ms DOMContentLoaded: 1.02s firstPaint: 544ms FCP: 544ms LCP: 604ms Load: 1.64s CLS:0.0004
[2023-03-23 13:29:18] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:29:19] INFO: Testing url https://www.helpsaude.com iteration 2
[2023-03-23 13:29:31] INFO: https://www.helpsaude.com TTFB: 223ms DOMContentLoaded: 431ms firstPaint: 430ms FCP: 430ms LCP: 517ms Load: 1.08s CLS:0.0004
[2023-03-23 13:29:31] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:29:32] INFO: Testing url https://www.helpsaude.com iteration 3
[2023-03-23 13:29:44] INFO: https://www.helpsaude.com TTFB: 448ms DOMContentLoaded: 649ms firstPaint: 650ms FCP: 650ms LCP: 733ms Load: 1.27s CLS:0.0004
[2023-03-23 13:29:44] INFO: https://www.helpsaude.com 67 requests, TTFB: 301ms (σ93.00ms 28.8%), firstPaint: 544ms (σ90.00ms 16.6%), FCP: 544ms (σ90.00ms 16.6%), DOMContentLoaded: 649ms (σ242.00ms 34.6%), LCP: 604ms (σ89.00ms 14.4%), CLS: 0.0004 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.27s (σ233.00ms 17.5%) (3 runs)
[2023-03-23 13:29:44] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\helpsaude.com\Edge\2023-03-23_13-29-03
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 13:29:46] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 13:29:47] INFO: Testing url https://www.pcwintech.com iteration 1
[2023-03-23 13:30:00] INFO: https://www.pcwintech.com TTFB: 1.04s DOMContentLoaded: 1.22s firstPaint: 1.23s FCP: 1.23s LCP: 1.23s Load: 1.77s CLS:0.1305
[2023-03-23 13:30:01] INFO: Testing url https://www.pcwintech.com iteration 2
[2023-03-23 13:30:12] INFO: https://www.pcwintech.com TTFB: 369ms DOMContentLoaded: 537ms firstPaint: 548ms FCP: 548ms LCP: 548ms Load: 1.16s CLS:0.1305
[2023-03-23 13:30:13] INFO: Testing url https://www.pcwintech.com iteration 3
[2023-03-23 13:30:25] INFO: https://www.pcwintech.com TTFB: 274ms DOMContentLoaded: 437ms firstPaint: 449ms FCP: 449ms LCP: 449ms Load: 1.07s CLS:0.1305
[2023-03-23 13:30:25] INFO: https://www.pcwintech.com 32 requests, TTFB: 369ms (σ340.00ms 60.6%), firstPaint: 548ms (σ348.00ms 46.9%), FCP: 548ms (σ348.00ms 46.9%), DOMContentLoaded: 537ms (σ350.00ms 47.7%), LCP: 548ms (σ348.00ms 46.9%), CLS: 0.1305 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.16s (σ308.00ms 23.1%) (3 runs)
[2023-03-23 13:30:25] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\pcwintech.com\Chrome\2023-03-23_13-29-45
[2023-03-23 13:30:26] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 13:30:29] INFO: Testing url https://www.pcwintech.com iteration 1
[2023-03-23 13:30:46] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:30:50] INFO: https://www.pcwintech.com TTFB: 389ms DOMContentLoaded: 772ms firstPaint: 834ms FCP: 833ms Load: 7.50s 
[2023-03-23 13:30:55] INFO: Testing url https://www.pcwintech.com iteration 2
[2023-03-23 13:31:11] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:31:17] INFO: https://www.pcwintech.com TTFB: 639ms DOMContentLoaded: 1.44s firstPaint: 1.61s FCP: 1.60s Load: 7.63s 
[2023-03-23 13:31:22] INFO: Testing url https://www.pcwintech.com iteration 3
[2023-03-23 13:31:40] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:31:45] INFO: https://www.pcwintech.com TTFB: 550ms DOMContentLoaded: 1.15s firstPaint: 1.25s FCP: 1.23s Load: 8.78s 
[2023-03-23 13:31:45] INFO: https://www.pcwintech.com 115 requests, TTFB: 550ms (σ103.00ms 19.7%), firstPaint: 1.25s (σ319.00ms 25.9%), FCP: 1.23s (σ313.00ms 25.6%), DOMContentLoaded: 1.15s (σ274.00ms 24.4%), Load: 7.63s (σ575.00ms 7.2%) (3 runs)
[2023-03-23 13:31:45] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\pcwintech.com\Firefox\2023-03-23_13-30-25
[2023-03-23 13:31:47] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 13:31:47] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:31:48] INFO: Testing url https://www.pcwintech.com iteration 1
[2023-03-23 13:32:01] INFO: https://www.pcwintech.com TTFB: 957ms DOMContentLoaded: 1.17s firstPaint: 1.14s FCP: 1.14s LCP: 1.17s Load: 2.55s TBT: 111ms CLS:0.1368
[2023-03-23 13:32:01] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:32:02] INFO: Testing url https://www.pcwintech.com iteration 2
[2023-03-23 13:32:14] INFO: https://www.pcwintech.com TTFB: 318ms DOMContentLoaded: 511ms firstPaint: 483ms FCP: 483ms LCP: 506ms Load: 1.52s TBT: 89ms CLS:0.1368
[2023-03-23 13:32:14] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:32:15] INFO: Testing url https://www.pcwintech.com iteration 3
[2023-03-23 13:32:28] INFO: https://www.pcwintech.com TTFB: 273ms DOMContentLoaded: 475ms firstPaint: 427ms FCP: 427ms LCP: 454ms Load: 1.67s TBT: 48ms CLS:0.1368
[2023-03-23 13:32:28] INFO: https://www.pcwintech.com 46 requests, TTFB: 318ms (σ312.00ms 60.5%), firstPaint: 483ms (σ324.00ms 47.4%), FCP: 483ms (σ324.00ms 47.4%), DOMContentLoaded: 511ms (σ321.00ms 44.6%), LCP: 506ms (σ325.00ms 45.8%), CLS: 0.1368 (σ0.00 0%), TBT: 89ms (σ26.00ms 31.6%), Load: 1.67s (σ453.00ms 23.7%) (3 runs)
[2023-03-23 13:32:28] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\pcwintech.com\Edge\2023-03-23_13-31-45
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 13:32:33] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 13:32:34] INFO: Testing url https://www.nwfdailynews.com iteration 1
[2023-03-23 13:32:49] INFO: https://www.nwfdailynews.com TTFB: 264ms DOMContentLoaded: 644ms firstPaint: 643ms FCP: 643ms LCP: 643ms Load: 3.37s TBT: 572ms CLS:0.0948
[2023-03-23 13:32:50] INFO: Testing url https://www.nwfdailynews.com iteration 2
[2023-03-23 13:33:03] INFO: https://www.nwfdailynews.com TTFB: 192ms DOMContentLoaded: 351ms firstPaint: 376ms FCP: 376ms LCP: 376ms Load: 2.32s TBT: 74ms CLS:0.0948
[2023-03-23 13:33:04] INFO: Testing url https://www.nwfdailynews.com iteration 3
[2023-03-23 13:33:17] INFO: https://www.nwfdailynews.com TTFB: 208ms DOMContentLoaded: 362ms firstPaint: 381ms FCP: 381ms LCP: 659ms Load: 2.43s TBT: 58ms CLS:0.0948
[2023-03-23 13:33:17] INFO: https://www.nwfdailynews.com 381 requests, TTFB: 208ms (σ31.00ms 13.9%), firstPaint: 381ms (σ125.00ms 26.7%), FCP: 381ms (σ125.00ms 26.7%), DOMContentLoaded: 362ms (σ136.00ms 30.0%), LCP: 643ms (σ130.00ms 23.2%), CLS: 0.0948 (σ0.00 0%), TBT: 74ms (σ239.00ms 101.7%), Load: 2.43s (σ472.00ms 17.5%) (3 runs)
[2023-03-23 13:33:17] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\nwfdailynews.com\Chrome\2023-03-23_13-32-31
[2023-03-23 13:33:19] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 13:33:22] INFO: Testing url https://www.nwfdailynews.com iteration 1
[2023-03-23 13:33:42] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:33:44] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:34:01] INFO: https://www.nwfdailynews.com TTFB: 241ms DOMContentLoaded: 2.31s firstPaint: 2.25s FCP: 2.25s Load: 28.33s 
[2023-03-23 13:34:05] INFO: Testing url https://www.nwfdailynews.com iteration 2
[2023-03-23 13:34:26] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:34:27] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:34:46] INFO: https://www.nwfdailynews.com TTFB: 238ms DOMContentLoaded: 1.48s firstPaint: 1.39s FCP: 1.38s Load: 26.80s 
[2023-03-23 13:34:50] INFO: Testing url https://www.nwfdailynews.com iteration 3
[2023-03-23 13:35:10] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:35:16] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:35:36] INFO: https://www.nwfdailynews.com TTFB: 232ms DOMContentLoaded: 1.50s firstPaint: 1.45s FCP: 1.45s Load: 29.38s 
[2023-03-23 13:35:36] INFO: https://www.nwfdailynews.com 315 requests, TTFB: 238ms (σ4.00ms 1.6%), firstPaint: 1.45s (σ393.00ms 23.1%), FCP: 1.45s (σ394.00ms 23.3%), DOMContentLoaded: 1.50s (σ388.00ms 22.0%), Load: 28.33s (σ1.06s 3.8%) (3 runs)
[2023-03-23 13:35:36] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\nwfdailynews.com\Firefox\2023-03-23_13-33-18
[2023-03-23 13:35:38] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 13:35:38] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:35:38] INFO: Testing url https://www.nwfdailynews.com iteration 1
[2023-03-23 13:35:59] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:36:01] INFO: https://www.nwfdailynews.com TTFB: 197ms DOMContentLoaded: 506ms firstPaint: 503ms FCP: 503ms LCP: 678ms Load: 18.10s TBT: 502ms CLS:0.0948
[2023-03-23 13:36:01] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:36:02] INFO: Testing url https://www.nwfdailynews.com iteration 2
[2023-03-23 13:36:15] INFO: https://www.nwfdailynews.com TTFB: 184ms DOMContentLoaded: 368ms firstPaint: 378ms FCP: 378ms LCP: 399ms Load: 2.63s TBT: 114ms CLS:0.0948
[2023-03-23 13:36:15] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:36:16] INFO: Testing url https://www.nwfdailynews.com iteration 3
[2023-03-23 13:36:29] INFO: https://www.nwfdailynews.com TTFB: 192ms DOMContentLoaded: 366ms firstPaint: 366ms FCP: 366ms LCP: 388ms Load: 2.64s TBT: 66ms CLS:0.0948
[2023-03-23 13:36:29] INFO: https://www.nwfdailynews.com 381 requests, TTFB: 192ms (σ5.00ms 2.8%), firstPaint: 378ms (σ62.00ms 14.9%), FCP: 378ms (σ62.00ms 14.9%), DOMContentLoaded: 368ms (σ66.00ms 15.9%), LCP: 399ms (σ134.00ms 27.5%), CLS: 0.0948 (σ0.00 0%), TBT: 114ms (σ195.00ms 85.9%), Load: 2.64s (σ7.29s 93.5%) (3 runs)
[2023-03-23 13:36:29] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\nwfdailynews.com\Edge\2023-03-23_13-35-36
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 13:36:32] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 13:36:33] INFO: Testing url https://www.abhirupmukherjee.com iteration 1
[2023-03-23 13:36:44] INFO: https://www.abhirupmukherjee.com TTFB: 587ms DOMContentLoaded: 891ms firstPaint: 839ms FCP: 839ms LCP: 941ms Load: 1.06s CLS:0.4067
[2023-03-23 13:36:45] INFO: Testing url https://www.abhirupmukherjee.com iteration 2
[2023-03-23 13:36:57] INFO: https://www.abhirupmukherjee.com TTFB: 292ms DOMContentLoaded: 590ms firstPaint: 537ms FCP: 537ms LCP: 653ms Load: 756ms CLS:0.4067
[2023-03-23 13:36:58] INFO: Testing url https://www.abhirupmukherjee.com iteration 3
[2023-03-23 13:37:09] INFO: https://www.abhirupmukherjee.com TTFB: 282ms DOMContentLoaded: 577ms firstPaint: 519ms FCP: 519ms LCP: 635ms Load: 781ms CLS:0.4067
[2023-03-23 13:37:09] INFO: https://www.abhirupmukherjee.com 37 requests, TTFB: 292ms (σ141.00ms 36.6%), firstPaint: 537ms (σ147.00ms 23.2%), FCP: 537ms (σ147.00ms 23.2%), DOMContentLoaded: 590ms (σ145.00ms 21.1%), LCP: 653ms (σ140.00ms 18.9%), CLS: 0.4067 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 781ms (σ138.00ms 16.0%) (3 runs)
[2023-03-23 13:37:09] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\abhirupmukherjee.com\Chrome\2023-03-23_13-36-31
[2023-03-23 13:37:11] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 13:37:13] INFO: Testing url https://www.abhirupmukherjee.com iteration 1
[2023-03-23 13:37:24] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:37:28] INFO: https://www.abhirupmukherjee.com TTFB: 332ms DOMContentLoaded: 1.01s firstPaint: 978ms FCP: 933ms Load: 1.61s 
[2023-03-23 13:37:35] INFO: Testing url https://www.abhirupmukherjee.com iteration 2
[2023-03-23 13:37:49] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:37:55] INFO: https://www.abhirupmukherjee.com TTFB: 819ms DOMContentLoaded: 3.71s firstPaint: 3.48s FCP: 3.13s Load: 5.54s 
[2023-03-23 13:38:00] INFO: Testing url https://www.abhirupmukherjee.com iteration 3
[2023-03-23 13:38:13] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:38:17] INFO: https://www.abhirupmukherjee.com TTFB: 741ms DOMContentLoaded: 3.10s firstPaint: 2.96s FCP: 2.95s Load: 4.58s 
[2023-03-23 13:38:17] INFO: https://www.abhirupmukherjee.com 42 requests, TTFB: 741ms (σ214.00ms 33.9%), firstPaint: 2.96s (σ1.08s 43.6%), FCP: 2.95s (σ998.00ms 42.6%), DOMContentLoaded: 3.10s (σ1.16s 44.3%), Load: 4.58s (σ1.67s 42.7%) (3 runs)
[2023-03-23 13:38:17] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\abhirupmukherjee.com\Firefox\2023-03-23_13-37-10
[2023-03-23 13:38:18] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 13:38:18] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:38:19] INFO: Testing url https://www.abhirupmukherjee.com iteration 1
[2023-03-23 13:38:31] INFO: https://www.abhirupmukherjee.com TTFB: 232ms DOMContentLoaded: 580ms firstPaint: 485ms FCP: 485ms LCP: 648ms Load: 811ms CLS:0.4067
[2023-03-23 13:38:31] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:38:32] INFO: Testing url https://www.abhirupmukherjee.com iteration 2
[2023-03-23 13:38:43] INFO: https://www.abhirupmukherjee.com TTFB: 261ms DOMContentLoaded: 568ms firstPaint: 478ms FCP: 478ms LCP: 667ms Load: 737ms CLS:0.4067
[2023-03-23 13:38:43] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:38:44] INFO: Testing url https://www.abhirupmukherjee.com iteration 3
[2023-03-23 13:38:56] INFO: https://www.abhirupmukherjee.com TTFB: 250ms DOMContentLoaded: 737ms firstPaint: 588ms FCP: 588ms LCP: 732ms Load: 1.02s TBT: 39ms CLS:0.4119
[2023-03-23 13:38:56] INFO: https://www.abhirupmukherjee.com 37 requests, TTFB: 250ms (σ12.00ms 4.8%), firstPaint: 485ms (σ50.00ms 9.7%), FCP: 485ms (σ50.00ms 9.7%), DOMContentLoaded: 580ms (σ77.00ms 12.3%), LCP: 667ms (σ36.00ms 5.3%), CLS: 0.4067 (σ0.00 0.6%), TBT: 0ms (σ18.00ms 141.4%), Load: 811ms (σ120.00ms 14.0%) (3 runs)
[2023-03-23 13:38:56] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\abhirupmukherjee.com\Edge\2023-03-23_13-38-17
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 13:39:00] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 13:39:01] INFO: Testing url https://www.thaqalain.ir iteration 1
[2023-03-23 13:39:13] INFO: https://www.thaqalain.ir TTFB: 1.32s DOMContentLoaded: 1.33s firstPaint: 1.35s FCP: 1.35s LCP: 1.35s Load: 1.33s 
[2023-03-23 13:39:14] INFO: Testing url https://www.thaqalain.ir iteration 2
[2023-03-23 13:39:25] INFO: https://www.thaqalain.ir TTFB: 1.38s DOMContentLoaded: 1.40s firstPaint: 1.40s FCP: 1.40s LCP: 1.40s Load: 1.40s 
[2023-03-23 13:39:26] INFO: Testing url https://www.thaqalain.ir iteration 3
[2023-03-23 13:39:39] INFO: https://www.thaqalain.ir TTFB: 1.57s DOMContentLoaded: 1.58s firstPaint: 1.58s FCP: 1.58s LCP: 1.58s Load: 1.58s 
[2023-03-23 13:39:39] INFO: https://www.thaqalain.ir 1 requests, TTFB: 1.38s (σ104.00ms 7.3%), firstPaint: 1.40s (σ101.00ms 7.0%), FCP: 1.40s (σ101.00ms 7.0%), DOMContentLoaded: 1.40s (σ103.00ms 7.1%), LCP: 1.40s (σ101.00ms 7.0%), CLS: 0 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.40s (σ103.00ms 7.1%) (3 runs)
[2023-03-23 13:39:39] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\thaqalain.ir\Chrome\2023-03-23_13-38-59
[2023-03-23 13:39:41] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 13:39:43] INFO: Testing url https://www.thaqalain.ir iteration 1
[2023-03-23 13:40:03] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:40:03] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:40:13] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 13:40:13] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 13:40:14] INFO: https://www.thaqalain.ir 
[2023-03-23 13:40:16] INFO: Testing url https://www.thaqalain.ir iteration 2
[2023-03-23 13:40:36] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:40:36] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:40:46] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 13:40:46] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 13:40:47] INFO: https://www.thaqalain.ir 
[2023-03-23 13:40:50] INFO: Testing url https://www.thaqalain.ir iteration 3
[2023-03-23 13:41:10] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:41:10] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:41:20] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 13:41:20] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 13:41:21] INFO: https://www.thaqalain.ir 
[2023-03-23 13:41:21] INFO: https://www.thaqalain.ir 
[2023-03-23 13:41:21] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\thaqalain.ir\Firefox\2023-03-23_13-39-39
[2023-03-23 13:41:22] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 13:41:22] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:41:23] INFO: Testing url https://www.thaqalain.ir iteration 1
[2023-03-23 13:41:36] INFO: https://www.thaqalain.ir TTFB: 1.83s DOMContentLoaded: 1.85s firstPaint: 1.86s FCP: 1.86s LCP: 1.86s Load: 1.85s 
[2023-03-23 13:41:36] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:41:37] INFO: Testing url https://www.thaqalain.ir iteration 2
[2023-03-23 13:41:48] INFO: https://www.thaqalain.ir TTFB: 1.35s DOMContentLoaded: 1.36s firstPaint: 1.37s FCP: 1.37s LCP: 1.37s Load: 1.36s 
[2023-03-23 13:41:48] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:41:49] INFO: Testing url https://www.thaqalain.ir iteration 3
[2023-03-23 13:42:01] INFO: https://www.thaqalain.ir TTFB: 1.27s DOMContentLoaded: 1.29s firstPaint: 1.30s FCP: 1.30s LCP: 1.30s Load: 1.29s 
[2023-03-23 13:42:01] INFO: https://www.thaqalain.ir 1 requests, TTFB: 1.35s (σ247.00ms 16.7%), firstPaint: 1.37s (σ246.00ms 16.3%), FCP: 1.37s (σ246.00ms 16.3%), DOMContentLoaded: 1.36s (σ248.00ms 16.6%), LCP: 1.37s (σ246.00ms 16.3%), CLS: 0 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.36s (σ249.00ms 16.6%) (3 runs)
[2023-03-23 13:42:01] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\thaqalain.ir\Edge\2023-03-23_13-41-21
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 13:42:03] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 13:42:04] INFO: Testing url https://www.educoins.io iteration 1
[2023-03-23 13:42:24] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:43:46] INFO: https://www.educoins.io TTFB: 99.36s DOMContentLoaded: 99.53s firstPaint: 99.45s FCP: 99.45s LCP: 99.45s Load: 99.53s 
[2023-03-23 13:43:46] INFO: Testing url https://www.educoins.io iteration 2
[2023-03-23 13:44:06] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:45:28] INFO: https://www.educoins.io TTFB: 99.29s DOMContentLoaded: 99.54s firstPaint: 99.55s FCP: 99.55s LCP: 99.55s Load: 99.55s 
[2023-03-23 13:45:29] INFO: Testing url https://www.educoins.io iteration 3
[2023-03-23 13:45:49] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:47:11] INFO: https://www.educoins.io TTFB: 99.23s DOMContentLoaded: 99.35s firstPaint: 99.35s FCP: 99.35s LCP: 99.35s Load: 99.35s 
[2023-03-23 13:47:11] INFO: https://www.educoins.io 1 requests, TTFB: 99.29s (σ55.00ms 0.1%), firstPaint: 99.45s (σ81.00ms 0.1%), FCP: 99.45s (σ81.00ms 0.1%), DOMContentLoaded: 99.53s (σ90.00ms 0.1%), LCP: 99.45s (σ81.00ms 0.1%), CLS: 0 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 99.53s (σ90.00ms 0.1%) (3 runs)
[2023-03-23 13:47:11] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\educoins.io\Chrome\2023-03-23_13-42-02
[2023-03-23 13:47:12] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 13:47:15] INFO: Testing url https://www.educoins.io iteration 1
[2023-03-23 13:47:33] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:47:53] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:48:23] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:49:03] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:49:03] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:49:06] INFO: https://www.educoins.io TTFB: 99.36s DOMContentLoaded: 99.74s firstPaint: 99.74s FCP: 99.74s Load: 99.89s 
[2023-03-23 13:49:11] INFO: Testing url https://www.educoins.io iteration 2
[2023-03-23 13:49:29] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:49:49] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:50:19] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:50:59] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:50:59] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:51:02] INFO: https://www.educoins.io TTFB: 99.45s DOMContentLoaded: 99.66s firstPaint: 99.68s FCP: 99.67s Load: 99.69s 
[2023-03-23 13:51:04] INFO: Testing url https://www.educoins.io iteration 3
[2023-03-23 13:51:22] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:51:42] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:52:12] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:52:52] INFO: Will check again if the browser has navigated to the page
[2023-03-23 13:52:52] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:52:55] INFO: https://www.educoins.io TTFB: 99.40s DOMContentLoaded: 99.57s firstPaint: 99.59s FCP: 99.59s Load: 99.60s 
[2023-03-23 13:52:55] INFO: https://www.educoins.io 7 requests, TTFB: 99.40s (σ36.00ms 0.0%), firstPaint: 99.68s (σ62.00ms 0.1%), FCP: 99.67s (σ62.00ms 0.1%), DOMContentLoaded: 99.66s (σ68.00ms 0.1%), Load: 99.69s (σ120.00ms 0.1%) (3 runs)
[2023-03-23 13:52:55] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\educoins.io\Firefox\2023-03-23_13-47-11
[2023-03-23 13:52:56] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 13:52:56] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:52:57] INFO: Testing url https://www.educoins.io iteration 1
[2023-03-23 13:53:17] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:54:38] INFO: https://www.educoins.io TTFB: 99.22s DOMContentLoaded: 99.37s firstPaint: 99.37s FCP: 99.37s LCP: 99.37s Load: 99.37s 
[2023-03-23 13:54:38] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:54:39] INFO: Testing url https://www.educoins.io iteration 2
[2023-03-23 13:54:59] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:56:20] INFO: https://www.educoins.io TTFB: 99.23s DOMContentLoaded: 99.34s firstPaint: 99.35s FCP: 99.35s LCP: 99.35s Load: 99.34s 
[2023-03-23 13:56:20] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 13:56:21] INFO: Testing url https://www.educoins.io iteration 3
[2023-03-23 13:56:41] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:58:03] INFO: https://www.educoins.io TTFB: 99.22s DOMContentLoaded: 99.31s firstPaint: 99.35s FCP: 99.35s LCP: 99.35s Load: 99.34s 
[2023-03-23 13:58:03] INFO: https://www.educoins.io 1 requests, TTFB: 99.22s (σ5.00ms 0.0%), firstPaint: 99.35s (σ12.00ms 0.0%), FCP: 99.35s (σ12.00ms 0.0%), DOMContentLoaded: 99.34s (σ22.00ms 0.0%), LCP: 99.35s (σ12.00ms 0.0%), CLS: 0 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 99.34s (σ11.00ms 0.0%) (3 runs)
[2023-03-23 13:58:03] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\educoins.io\Edge\2023-03-23_13-52-55
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 13:58:04] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 13:58:05] INFO: Testing url https://www.lingxing.com iteration 1
[2023-03-23 13:58:26] INFO: https://www.lingxing.com TTFB: 1.25s DOMContentLoaded: 2.93s firstPaint: 2.73s FCP: 2.73s LCP: 2.73s Load: 9.73s CLS:0.0914
[2023-03-23 13:58:27] INFO: Testing url https://www.lingxing.com iteration 2
[2023-03-23 13:58:47] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:58:49] INFO: https://www.lingxing.com TTFB: 820ms DOMContentLoaded: 2.40s firstPaint: 2.20s FCP: 2.20s LCP: 2.20s Load: 10.82s CLS:0.0914
[2023-03-23 13:58:50] INFO: Testing url https://www.lingxing.com iteration 3
[2023-03-23 13:59:10] INFO: https://www.lingxing.com TTFB: 1.66s DOMContentLoaded: 2.56s firstPaint: 2.35s FCP: 2.35s LCP: 2.35s Load: 9.94s TBT: 1ms CLS:0.0912
[2023-03-23 13:59:10] INFO: https://www.lingxing.com 162 requests, TTFB: 1.25s (σ341.00ms 27.5%), firstPaint: 2.35s (σ220.00ms 9.1%), FCP: 2.35s (σ220.00ms 9.1%), DOMContentLoaded: 2.56s (σ222.00ms 8.4%), LCP: 2.35s (σ220.00ms 9.1%), CLS: 0.0914 (σ0.00 0.1%), TBT: 0ms (σ0.00ms 0%), Load: 9.94s (σ473.00ms 4.7%) (3 runs)
[2023-03-23 13:59:10] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\lingxing.com\Chrome\2023-03-23_13-58-04
[2023-03-23 13:59:11] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 13:59:13] INFO: Testing url https://www.lingxing.com iteration 1
[2023-03-23 13:59:33] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 13:59:33] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 13:59:39] INFO: https://www.lingxing.com TTFB: 1.13s DOMContentLoaded: 4.34s firstPaint: 1.70s FCP: 1.70s Load: 16.94s 
[2023-03-23 13:59:41] INFO: Testing url https://www.lingxing.com iteration 2
[2023-03-23 14:00:01] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:00:01] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:00:06] INFO: https://www.lingxing.com TTFB: 1.91s DOMContentLoaded: 5.44s firstPaint: 2.48s FCP: 2.48s Load: 16.18s 
[2023-03-23 14:00:08] INFO: Testing url https://www.lingxing.com iteration 3
[2023-03-23 14:00:28] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:00:28] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:00:34] INFO: https://www.lingxing.com TTFB: 1.07s DOMContentLoaded: 4.96s firstPaint: 1.58s FCP: 1.58s Load: 16.00s 
[2023-03-23 14:00:34] INFO: https://www.lingxing.com 168 requests, TTFB: 1.13s (σ383.00ms 27.9%), firstPaint: 1.70s (σ400.00ms 20.8%), FCP: 1.70s (σ400.00ms 20.8%), DOMContentLoaded: 4.96s (σ452.00ms 9.2%), Load: 16.18s (σ406.00ms 2.5%) (3 runs)
[2023-03-23 14:00:34] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\lingxing.com\Firefox\2023-03-23_13-59-11
[2023-03-23 14:00:35] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:00:35] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:00:36] INFO: Testing url https://www.lingxing.com iteration 1
[2023-03-23 14:00:55] INFO: https://www.lingxing.com TTFB: 1.72s DOMContentLoaded: 2.51s firstPaint: 2.30s FCP: 2.30s LCP: 2.30s Load: 8.54s TBT: 4ms CLS:0.0887
[2023-03-23 14:00:55] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:00:56] INFO: Testing url https://www.lingxing.com iteration 2
[2023-03-23 14:01:17] INFO: https://www.lingxing.com TTFB: 818ms DOMContentLoaded: 2.61s firstPaint: 2.39s FCP: 2.39s LCP: 2.39s Load: 9.31s CLS:0.0897
[2023-03-23 14:01:17] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:01:17] INFO: Testing url https://www.lingxing.com iteration 3
[2023-03-23 14:01:37] INFO: https://www.lingxing.com TTFB: 1.28s DOMContentLoaded: 2.55s firstPaint: 2.34s FCP: 2.34s LCP: 2.34s Load: 8.64s CLS:0.0899
[2023-03-23 14:01:37] INFO: https://www.lingxing.com 162 requests, TTFB: 1.28s (σ367.00ms 28.9%), firstPaint: 2.34s (σ38.00ms 1.6%), FCP: 2.34s (σ38.00ms 1.6%), DOMContentLoaded: 2.55s (σ42.00ms 1.6%), LCP: 2.34s (σ38.00ms 1.6%), CLS: 0.0897 (σ0.00 0.6%), TBT: 0ms (σ2.00ms 141.4%), Load: 8.64s (σ341.00ms 3.9%) (3 runs)
[2023-03-23 14:01:37] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\lingxing.com\Edge\2023-03-23_14-00-34
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 14:01:39] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:01:39] INFO: Testing url https://www.summit.news iteration 1
[2023-03-23 14:01:53] INFO: https://www.summit.news TTFB: 944ms DOMContentLoaded: 1.31s firstPaint: 1.18s FCP: 1.18s LCP: 1.41s Load: 1.82s CLS:0.2549
[2023-03-23 14:01:53] INFO: Testing url https://www.summit.news iteration 2
[2023-03-23 14:02:05] INFO: https://www.summit.news TTFB: 549ms DOMContentLoaded: 810ms firstPaint: 726ms FCP: 726ms LCP: 871ms Load: 1.29s CLS:0.2506
[2023-03-23 14:02:06] INFO: Testing url https://www.summit.news iteration 3
[2023-03-23 14:02:18] INFO: https://www.summit.news TTFB: 436ms DOMContentLoaded: 754ms firstPaint: 633ms FCP: 633ms LCP: 673ms Load: 1.15s CLS:0.2506
[2023-03-23 14:02:18] INFO: https://www.summit.news 114 requests, TTFB: 549ms (σ218.00ms 33.9%), firstPaint: 726ms (σ240.00ms 28.4%), FCP: 726ms (σ240.00ms 28.4%), DOMContentLoaded: 810ms (σ249.00ms 26.0%), LCP: 871ms (σ310.00ms 31.5%), CLS: 0.2506 (σ0.00 0.8%), TBT: 0ms (σ0.00ms 0%), Load: 1.29s (σ287.00ms 20.2%) (3 runs)
[2023-03-23 14:02:18] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\summit.news\Chrome\2023-03-23_14-01-38
[2023-03-23 14:02:19] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:02:21] INFO: Testing url https://www.summit.news iteration 1
[2023-03-23 14:02:32] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:02:35] INFO: https://www.summit.news TTFB: 842ms DOMContentLoaded: 1.41s firstPaint: 1.41s FCP: 1.40s Load: 1.78s 
[2023-03-23 14:02:37] INFO: Testing url https://www.summit.news iteration 2
[2023-03-23 14:02:50] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:02:54] INFO: https://www.summit.news TTFB: 364ms DOMContentLoaded: 1.38s firstPaint: 1.47s FCP: 1.45s Load: 3.54s 
[2023-03-23 14:02:56] INFO: Testing url https://www.summit.news iteration 3
[2023-03-23 14:03:10] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:03:13] INFO: https://www.summit.news TTFB: 1.07s DOMContentLoaded: 2.24s firstPaint: 2.23s FCP: 2.22s Load: 4.82s 
[2023-03-23 14:03:13] INFO: https://www.summit.news 170 requests, TTFB: 842ms (σ294.00ms 38.8%), firstPaint: 1.47s (σ376.00ms 22.1%), FCP: 1.45s (σ374.00ms 22.2%), DOMContentLoaded: 1.41s (σ399.00ms 23.8%), Load: 3.54s (σ1.25s 36.9%) (3 runs)
[2023-03-23 14:03:13] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\summit.news\Firefox\2023-03-23_14-02-18
[2023-03-23 14:03:14] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:03:14] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:03:15] INFO: Testing url https://www.summit.news iteration 1
[2023-03-23 14:03:27] INFO: https://www.summit.news TTFB: 699ms DOMContentLoaded: 975ms firstPaint: 859ms FCP: 859ms LCP: 922ms Load: 1.23s CLS:0.2507
[2023-03-23 14:03:27] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:03:28] INFO: Testing url https://www.summit.news iteration 2
[2023-03-23 14:03:39] INFO: https://www.summit.news TTFB: 571ms DOMContentLoaded: 953ms firstPaint: 723ms FCP: 723ms LCP: 971ms Load: 1.28s CLS:0.2542
[2023-03-23 14:03:40] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:03:40] INFO: Testing url https://www.summit.news iteration 3
[2023-03-23 14:03:52] INFO: https://www.summit.news TTFB: 419ms DOMContentLoaded: 698ms firstPaint: 573ms FCP: 573ms LCP: 722ms Load: 932ms CLS:0.2508
[2023-03-23 14:03:52] INFO: https://www.summit.news 114 requests, TTFB: 571ms (σ114.00ms 20.3%), firstPaint: 723ms (σ117.00ms 16.3%), FCP: 723ms (σ117.00ms 16.3%), DOMContentLoaded: 953ms (σ126.00ms 14.4%), LCP: 922ms (σ108.00ms 12.4%), CLS: 0.2508 (σ0.00 0.7%), TBT: 0ms (σ0.00ms 0%), Load: 1.23s (σ154.00ms 13.4%) (3 runs)
[2023-03-23 14:03:52] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\summit.news\Edge\2023-03-23_14-03-14
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 14:03:54] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:03:55] INFO: Testing url https://www.changing-guard.com iteration 1
[2023-03-23 14:04:08] INFO: https://www.changing-guard.com TTFB: 1.45s DOMContentLoaded: 1.69s firstPaint: 1.62s FCP: 1.62s LCP: 1.92s Load: 2.80s CLS:1.0803
[2023-03-23 14:04:09] INFO: Testing url https://www.changing-guard.com iteration 2
[2023-03-23 14:04:22] INFO: https://www.changing-guard.com TTFB: 1.18s DOMContentLoaded: 1.41s firstPaint: 1.34s FCP: 1.34s LCP: 1.34s Load: 1.97s CLS:1.1408
[2023-03-23 14:04:23] INFO: Testing url https://www.changing-guard.com iteration 3
[2023-03-23 14:04:36] INFO: https://www.changing-guard.com TTFB: 1.06s DOMContentLoaded: 1.30s firstPaint: 1.23s FCP: 1.23s LCP: 1.23s Load: 2.53s CLS:1.0345
[2023-03-23 14:04:36] INFO: https://www.changing-guard.com 51 requests, TTFB: 1.18s (σ164.00ms 13.3%), firstPaint: 1.34s (σ165.00ms 11.8%), FCP: 1.34s (σ165.00ms 11.8%), DOMContentLoaded: 1.41s (σ164.00ms 11.2%), LCP: 1.34s (σ300.00ms 20.1%), CLS: 1 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 2.53s (σ345.00ms 14.2%) (3 runs)
[2023-03-23 14:04:36] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\changing-guard.com\Chrome\2023-03-23_14-03-53
[2023-03-23 14:04:37] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:04:39] INFO: Testing url https://www.changing-guard.com iteration 1
[2023-03-23 14:04:54] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:04:58] INFO: https://www.changing-guard.com TTFB: 907ms DOMContentLoaded: 1.28s firstPaint: 1.32s FCP: 1.32s Load: 7.01s 
[2023-03-23 14:05:00] INFO: Testing url https://www.changing-guard.com iteration 2
[2023-03-23 14:05:15] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:05:19] INFO: https://www.changing-guard.com TTFB: 758ms DOMContentLoaded: 1.13s firstPaint: 1.20s FCP: 1.20s Load: 6.99s 
[2023-03-23 14:05:21] INFO: Testing url https://www.changing-guard.com iteration 3
[2023-03-23 14:05:37] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:05:40] INFO: https://www.changing-guard.com TTFB: 938ms DOMContentLoaded: 1.47s firstPaint: 1.55s FCP: 1.55s Load: 7.53s 
[2023-03-23 14:05:40] INFO: https://www.changing-guard.com 79 requests, TTFB: 907ms (σ79.00ms 9.1%), firstPaint: 1.32s (σ145.00ms 10.7%), FCP: 1.32s (σ146.00ms 10.8%), DOMContentLoaded: 1.28s (σ137.00ms 10.6%), Load: 7.01s (σ250.00ms 3.5%) (3 runs)
[2023-03-23 14:05:40] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\changing-guard.com\Firefox\2023-03-23_14-04-36
[2023-03-23 14:05:41] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:05:41] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:05:42] INFO: Testing url https://www.changing-guard.com iteration 1
[2023-03-23 14:05:55] INFO: https://www.changing-guard.com TTFB: 771ms DOMContentLoaded: 1.02s firstPaint: 930ms FCP: 930ms LCP: 930ms Load: 1.60s CLS:1.0338
[2023-03-23 14:05:55] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:05:56] INFO: Testing url https://www.changing-guard.com iteration 2
[2023-03-23 14:06:09] INFO: https://www.changing-guard.com TTFB: 1.00s DOMContentLoaded: 1.23s firstPaint: 1.15s FCP: 1.15s LCP: 1.35s Load: 1.93s CLS:1.0796
[2023-03-23 14:06:09] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:06:10] INFO: Testing url https://www.changing-guard.com iteration 3
[2023-03-23 14:06:23] INFO: https://www.changing-guard.com TTFB: 793ms DOMContentLoaded: 1.04s firstPaint: 951ms FCP: 951ms LCP: 951ms Load: 1.64s CLS:1.0338
[2023-03-23 14:06:23] INFO: https://www.changing-guard.com 38 requests, TTFB: 793ms (σ104.00ms 12.1%), firstPaint: 951ms (σ98.00ms 9.7%), FCP: 951ms (σ98.00ms 9.7%), DOMContentLoaded: 1.04s (σ97.00ms 8.8%), LCP: 951ms (σ193.00ms 17.9%), CLS: 1 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.64s (σ146.00ms 8.5%) (3 runs)
[2023-03-23 14:06:23] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\changing-guard.com\Edge\2023-03-23_14-05-40
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 14:06:25] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:06:26] INFO: Testing url https://www.simplisticallyliving.com iteration 1
[2023-03-23 14:06:38] INFO: https://www.simplisticallyliving.com TTFB: 804ms DOMContentLoaded: 1.02s firstPaint: 866ms FCP: 866ms LCP: 866ms Load: 1.28s TBT: 6ms 
[2023-03-23 14:06:38] INFO: Testing url https://www.simplisticallyliving.com iteration 2
[2023-03-23 14:06:50] INFO: https://www.simplisticallyliving.com TTFB: 526ms DOMContentLoaded: 996ms firstPaint: 602ms FCP: 602ms LCP: 602ms Load: 1.16s 
[2023-03-23 14:06:51] INFO: Testing url https://www.simplisticallyliving.com iteration 3
[2023-03-23 14:07:03] INFO: https://www.simplisticallyliving.com TTFB: 413ms DOMContentLoaded: 609ms firstPaint: 491ms FCP: 491ms LCP: 491ms Load: 845ms 
[2023-03-23 14:07:03] INFO: https://www.simplisticallyliving.com 428 requests, TTFB: 526ms (σ164.00ms 28.3%), firstPaint: 602ms (σ157.00ms 24.1%), FCP: 602ms (σ157.00ms 24.1%), DOMContentLoaded: 996ms (σ189.00ms 21.6%), LCP: 602ms (σ157.00ms 24.1%), CLS: 0 (σ0.00 0%), TBT: 0ms (σ3.00ms 141.4%), Load: 1.16s (σ184.00ms 16.8%) (3 runs)
[2023-03-23 14:07:03] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\simplisticallyliving.com\Chrome\2023-03-23_14-06-24
[2023-03-23 14:07:04] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:07:06] INFO: Testing url https://www.simplisticallyliving.com iteration 1
[2023-03-23 14:07:29] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:08:27] INFO: https://www.simplisticallyliving.com TTFB: 387ms DOMContentLoaded: 939ms firstPaint: 652ms FCP: 650ms Load: 1.61s 
[2023-03-23 14:08:30] INFO: Testing url https://www.simplisticallyliving.com iteration 2
[2023-03-23 14:08:54] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:10:06] INFO: https://www.simplisticallyliving.com TTFB: 615ms DOMContentLoaded: 1.21s firstPaint: 919ms FCP: 916ms Load: 2.13s 
[2023-03-23 14:10:09] INFO: Testing url https://www.simplisticallyliving.com iteration 3
[2023-03-23 14:10:32] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:11:29] INFO: https://www.simplisticallyliving.com TTFB: 386ms DOMContentLoaded: 1.06s firstPaint: 753ms FCP: 750ms Load: 1.48s 
[2023-03-23 14:11:29] INFO: https://www.simplisticallyliving.com 394 requests, TTFB: 387ms (σ108.00ms 23.3%), firstPaint: 753ms (σ110.00ms 14.2%), FCP: 750ms (σ110.00ms 14.2%), DOMContentLoaded: 1.06s (σ110.00ms 10.3%), Load: 1.61s (σ282.00ms 16.2%) (3 runs)
[2023-03-23 14:11:30] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\simplisticallyliving.com\Firefox\2023-03-23_14-07-03
[2023-03-23 14:11:31] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:11:31] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:11:31] INFO: Testing url https://www.simplisticallyliving.com iteration 1
[2023-03-23 14:11:44] INFO: https://www.simplisticallyliving.com TTFB: 390ms DOMContentLoaded: 617ms firstPaint: 481ms FCP: 481ms LCP: 481ms Load: 848ms 
[2023-03-23 14:11:44] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:11:44] INFO: Testing url https://www.simplisticallyliving.com iteration 2
[2023-03-23 14:11:57] INFO: https://www.simplisticallyliving.com TTFB: 366ms DOMContentLoaded: 582ms firstPaint: 442ms FCP: 442ms LCP: 442ms Load: 794ms TBT: 89ms 
[2023-03-23 14:11:57] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:11:58] INFO: Testing url https://www.simplisticallyliving.com iteration 3
[2023-03-23 14:12:11] INFO: https://www.simplisticallyliving.com TTFB: 383ms DOMContentLoaded: 572ms firstPaint: 471ms FCP: 471ms LCP: 471ms Load: 811ms TBT: 66ms 
[2023-03-23 14:12:11] INFO: https://www.simplisticallyliving.com 524 requests, TTFB: 383ms (σ10.00ms 2.7%), firstPaint: 471ms (σ17.00ms 3.6%), FCP: 471ms (σ17.00ms 3.6%), DOMContentLoaded: 582ms (σ19.00ms 3.3%), LCP: 471ms (σ17.00ms 3.6%), CLS: 0 (σ0.00 0%), TBT: 66ms (σ38.00ms 73.0%), Load: 811ms (σ23.00ms 2.8%) (3 runs)
[2023-03-23 14:12:11] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\simplisticallyliving.com\Edge\2023-03-23_14-11-30
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:3
+ <<<<<<< HEAD
+   ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:2
+ <<<<<<< HEAD
+  ~
The '<' operator is reserved for future use.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:4
+ <<<<<<< HEAD
+    ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:3
+ <<<<<<< HEAD
+   ~
The '<' operator is reserved for future use.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:5
+ <<<<<<< HEAD
+     ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:4
+ <<<<<<< HEAD
+    ~
The '<' operator is reserved for future use.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:6
+ <<<<<<< HEAD
+      ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:5
+ <<<<<<< HEAD
+     ~
The '<' operator is reserved for future use.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:7
+ <<<<<<< HEAD
+       ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:6
+ <<<<<<< HEAD
+      ~
The '<' operator is reserved for future use.
Not all parse errors were reported.  Correct the reported errors and try again.
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : MissingFileSpecification
 
[2023-03-23 14:12:13] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:12:14] INFO: Testing url https://www.assemblarepconline.it iteration 1
[2023-03-23 14:12:27] INFO: https://www.assemblarepconline.it TTFB: 864ms DOMContentLoaded: 2.87s firstPaint: 1.97s FCP: 1.97s LCP: 2.09s Load: 2.88s 
[2023-03-23 14:12:28] INFO: Testing url https://www.assemblarepconline.it iteration 2
[2023-03-23 14:12:41] INFO: https://www.assemblarepconline.it TTFB: 778ms DOMContentLoaded: 2.53s firstPaint: 1.73s FCP: 1.73s LCP: 1.82s Load: 2.54s 
[2023-03-23 14:12:42] INFO: Testing url https://www.assemblarepconline.it iteration 3
[2023-03-23 14:12:55] INFO: https://www.assemblarepconline.it TTFB: 791ms DOMContentLoaded: 2.60s firstPaint: 1.76s FCP: 1.76s LCP: 1.86s Load: 2.62s 
[2023-03-23 14:12:55] INFO: https://www.assemblarepconline.it 22 requests, TTFB: 791ms (σ38.00ms 4.7%), firstPaint: 1.76s (σ106.00ms 5.8%), FCP: 1.76s (σ106.00ms 5.8%), DOMContentLoaded: 2.60s (σ149.00ms 5.6%), LCP: 1.86s (σ117.00ms 6.1%), CLS: 0 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 2.62s (σ148.00ms 5.5%) (3 runs)
[2023-03-23 14:12:56] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\assemblarepconline.it\Chrome\2023-03-23_14-12-11
[2023-03-23 14:12:56] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:12:58] INFO: Testing url https://www.assemblarepconline.it iteration 1
[2023-03-23 14:13:10] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:13:13] INFO: https://www.assemblarepconline.it TTFB: 832ms DOMContentLoaded: 2.12s firstPaint: 1.54s FCP: 2.08s Load: 2.36s 
[2023-03-23 14:13:15] INFO: Testing url https://www.assemblarepconline.it iteration 2
[2023-03-23 14:13:26] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:13:30] INFO: https://www.assemblarepconline.it TTFB: 748ms DOMContentLoaded: 2.08s firstPaint: 1.47s FCP: 2.03s Load: 2.28s 
[2023-03-23 14:13:31] INFO: Testing url https://www.assemblarepconline.it iteration 3
[2023-03-23 14:13:43] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:13:46] INFO: https://www.assemblarepconline.it TTFB: 592ms DOMContentLoaded: 2.01s firstPaint: 1.32s FCP: 1.95s Load: 2.20s 
[2023-03-23 14:13:46] INFO: https://www.assemblarepconline.it 30 requests, TTFB: 748ms (σ99.00ms 13.7%), firstPaint: 1.47s (σ93.00ms 6.4%), FCP: 2.03s (σ55.00ms 2.7%), DOMContentLoaded: 2.08s (σ45.00ms 2.2%), Load: 2.28s (σ67.00ms 3.0%) (3 runs)
[2023-03-23 14:13:46] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\assemblarepconline.it\Firefox\2023-03-23_14-12-56
[2023-03-23 14:13:47] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:13:47] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:13:48] INFO: Testing url https://www.assemblarepconline.it iteration 1
[2023-03-23 14:14:01] INFO: https://www.assemblarepconline.it TTFB: 583ms DOMContentLoaded: 2.42s firstPaint: 1.54s FCP: 1.54s LCP: 1.70s Load: 2.43s CLS:0.0232
[2023-03-23 14:14:01] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:14:02] INFO: Testing url https://www.assemblarepconline.it iteration 2
[2023-03-23 14:14:15] INFO: https://www.assemblarepconline.it TTFB: 495ms DOMContentLoaded: 3.01s firstPaint: 1.60s FCP: 1.60s LCP: 1.75s Load: 3.03s CLS:0.0232
[2023-03-23 14:14:15] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:14:16] INFO: Testing url https://www.assemblarepconline.it iteration 3
[2023-03-23 14:14:30] INFO: https://www.assemblarepconline.it TTFB: 561ms DOMContentLoaded: 2.74s firstPaint: 1.70s FCP: 1.70s LCP: 1.87s Load: 2.75s CLS:0.0232
[2023-03-23 14:14:30] INFO: https://www.assemblarepconline.it 23 requests, TTFB: 561ms (σ37.00ms 6.8%), firstPaint: 1.60s (σ63.00ms 3.9%), FCP: 1.60s (σ63.00ms 3.9%), DOMContentLoaded: 2.74s (σ238.00ms 8.8%), LCP: 1.75s (σ72.00ms 4.0%), CLS: 0.0232 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 2.75s (σ243.00ms 8.9%) (3 runs)
[2023-03-23 14:14:30] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\assemblarepconline.it\Edge\2023-03-23_14-13-46
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:3
+ <<<<<<< HEAD
+   ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:2
+ <<<<<<< HEAD
+  ~
The '<' operator is reserved for future use.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:4
+ <<<<<<< HEAD
+    ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:3
+ <<<<<<< HEAD
+   ~
The '<' operator is reserved for future use.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:5
+ <<<<<<< HEAD
+     ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:4
+ <<<<<<< HEAD
+    ~
The '<' operator is reserved for future use.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:6
+ <<<<<<< HEAD
+      ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:5
+ <<<<<<< HEAD
+     ~
The '<' operator is reserved for future use.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:7
+ <<<<<<< HEAD
+       ~
Missing file specification after redirection operator.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:8 char:6
+ <<<<<<< HEAD
+      ~
The '<' operator is reserved for future use.
Not all parse errors were reported.  Correct the reported errors and try again.
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : MissingFileSpecification
 
[2023-03-23 14:14:31] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:14:31] INFO: Testing url https://www.mcdonalds.fr iteration 1
[2023-03-23 14:14:44] INFO: https://www.mcdonalds.fr TTFB: 751ms DOMContentLoaded: 1.02s firstPaint: 1.03s FCP: 1.03s LCP: 1.03s Load: 1.23s TBT: 152ms CLS:0.0049
[2023-03-23 14:14:44] INFO: Testing url https://www.mcdonalds.fr iteration 2
[2023-03-23 14:14:56] INFO: https://www.mcdonalds.fr TTFB: 164ms DOMContentLoaded: 537ms firstPaint: 438ms FCP: 438ms LCP: 438ms Load: 624ms TBT: 76ms CLS:0.0043
[2023-03-23 14:14:57] INFO: Testing url https://www.mcdonalds.fr iteration 3
[2023-03-23 14:15:09] INFO: https://www.mcdonalds.fr TTFB: 153ms DOMContentLoaded: 516ms firstPaint: 407ms FCP: 407ms LCP: 407ms Load: 598ms TBT: 77ms CLS:0.0043
[2023-03-23 14:15:09] INFO: https://www.mcdonalds.fr 100 requests, TTFB: 164ms (σ279.00ms 78.5%), firstPaint: 438ms (σ285.00ms 45.7%), FCP: 438ms (σ285.00ms 45.7%), DOMContentLoaded: 537ms (σ233.00ms 33.7%), LCP: 438ms (σ285.00ms 45.7%), CLS: 0.0043 (σ0.00 6.4%), TBT: 77ms (σ36.00ms 35.0%), Load: 624ms (σ292.00ms 35.8%) (3 runs)
[2023-03-23 14:15:09] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\mcdonalds.fr\Chrome\2023-03-23_14-14-30
[2023-03-23 14:15:10] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:15:12] INFO: Testing url https://www.mcdonalds.fr iteration 1
[2023-03-23 14:15:22] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:15:27] INFO: https://www.mcdonalds.fr TTFB: 344ms DOMContentLoaded: 766ms firstPaint: 803ms FCP: 800ms Load: 1.12s 
[2023-03-23 14:15:29] INFO: Testing url https://www.mcdonalds.fr iteration 2
[2023-03-23 14:15:40] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:15:45] INFO: https://www.mcdonalds.fr TTFB: 216ms DOMContentLoaded: 1.07s firstPaint: 1.14s FCP: 1.13s Load: 1.78s 
[2023-03-23 14:15:48] INFO: Testing url https://www.mcdonalds.fr iteration 3
[2023-03-23 14:15:59] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:16:05] INFO: https://www.mcdonalds.fr TTFB: 626ms DOMContentLoaded: 1.52s firstPaint: 1.52s FCP: 1.52s Load: 2.16s 
[2023-03-23 14:16:05] INFO: https://www.mcdonalds.fr 76 requests, TTFB: 344ms (σ171.00ms 43.3%), firstPaint: 1.14s (σ292.00ms 25.3%), FCP: 1.13s (σ293.00ms 25.4%), DOMContentLoaded: 1.07s (σ312.00ms 27.8%), Load: 1.78s (σ430.00ms 25.4%) (3 runs)
[2023-03-23 14:16:05] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\mcdonalds.fr\Firefox\2023-03-23_14-15-09
[2023-03-23 14:16:06] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:16:06] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:16:06] INFO: Testing url https://www.mcdonalds.fr iteration 1
[2023-03-23 14:16:19] INFO: https://www.mcdonalds.fr TTFB: 202ms DOMContentLoaded: 691ms firstPaint: 474ms FCP: 474ms LCP: 515ms Load: 979ms TBT: 317ms CLS:0.0056
[2023-03-23 14:16:19] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:16:19] INFO: Testing url https://www.mcdonalds.fr iteration 2
[2023-03-23 14:16:31] INFO: https://www.mcdonalds.fr TTFB: 165ms DOMContentLoaded: 546ms firstPaint: 401ms FCP: 401ms LCP: 553ms Load: 629ms TBT: 154ms CLS:0.0056
[2023-03-23 14:16:31] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:16:32] INFO: Testing url https://www.mcdonalds.fr iteration 3
[2023-03-23 14:16:44] INFO: https://www.mcdonalds.fr TTFB: 204ms DOMContentLoaded: 574ms firstPaint: 441ms FCP: 441ms LCP: 580ms Load: 638ms TBT: 143ms CLS:0.0056
[2023-03-23 14:16:44] INFO: https://www.mcdonalds.fr 100 requests, TTFB: 202ms (σ18.00ms 9.4%), firstPaint: 441ms (σ30.00ms 6.8%), FCP: 441ms (σ30.00ms 6.8%), DOMContentLoaded: 574ms (σ63.00ms 10.4%), LCP: 553ms (σ27.00ms 4.9%), CLS: 0.0056 (σ0.00 0%), TBT: 154ms (σ80.00ms 38.9%), Load: 638ms (σ163.00ms 21.8%) (3 runs)
[2023-03-23 14:16:44] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\mcdonalds.fr\Edge\2023-03-23_14-16-05
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 14:16:46] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:16:47] INFO: Testing url https://www.fci.gov.in iteration 1
[2023-03-23 14:17:07] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:17:09] INFO: https://www.fci.gov.in TTFB: 1.90s DOMContentLoaded: 3.67s firstPaint: 3.37s FCP: 3.37s LCP: 7.07s TBT: 309ms CLS:0.0267
[2023-03-23 14:17:10] INFO: Testing url https://www.fci.gov.in iteration 2
[2023-03-23 14:17:30] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:17:33] INFO: https://www.fci.gov.in TTFB: 1.77s DOMContentLoaded: 3.32s firstPaint: 3.29s FCP: 3.29s LCP: 5.85s TBT: 279ms CLS:0.0463
[2023-03-23 14:17:33] INFO: Testing url https://www.fci.gov.in iteration 3
[2023-03-23 14:17:53] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:17:56] INFO: https://www.fci.gov.in TTFB: 1.70s DOMContentLoaded: 3.39s firstPaint: 3.30s FCP: 3.30s LCP: 14.16s TBT: 276ms CLS:0.0289
[2023-03-23 14:17:56] INFO: https://www.fci.gov.in 97 requests, TTFB: 1.77s (σ83.00ms 4.6%), firstPaint: 3.30s (σ37.00ms 1.1%), FCP: 3.30s (σ37.00ms 1.1%), DOMContentLoaded: 3.39s (σ154.00ms 4.5%), LCP: 7.07s (σ3.66s 40.6%), CLS: 0.0289 (σ0.01 25.8%), TBT: 279ms (σ15.00ms 5.2%), Load: 0ms (σ0.00ms 0%) (3 runs)
[2023-03-23 14:17:56] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\fci.gov.in\Chrome\2023-03-23_14-16-45
[2023-03-23 14:17:57] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:17:59] INFO: Testing url https://www.fci.gov.in iteration 1
[2023-03-23 14:18:19] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:18:19] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:18:29] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 14:18:29] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:18:30] INFO: https://www.fci.gov.in 
[2023-03-23 14:18:32] INFO: Testing url https://www.fci.gov.in iteration 2
[2023-03-23 14:18:52] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:18:52] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:19:02] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 14:19:02] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:19:03] INFO: https://www.fci.gov.in 
[2023-03-23 14:19:05] INFO: Testing url https://www.fci.gov.in iteration 3
[2023-03-23 14:19:25] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:19:25] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:19:35] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 14:19:35] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:19:36] INFO: https://www.fci.gov.in 
[2023-03-23 14:19:36] INFO: https://www.fci.gov.in 
[2023-03-23 14:19:36] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\fci.gov.in\Firefox\2023-03-23_14-17-56
[2023-03-23 14:19:37] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:19:37] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:19:37] INFO: Testing url https://www.fci.gov.in iteration 1
[2023-03-23 14:19:57] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:20:00] INFO: https://www.fci.gov.in TTFB: 1.57s DOMContentLoaded: 2.96s firstPaint: 2.85s FCP: 2.85s LCP: 11.04s TBT: 315ms CLS:0.8994
[2023-03-23 14:20:00] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:20:00] INFO: Testing url https://www.fci.gov.in iteration 2
[2023-03-23 14:20:20] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:20:23] INFO: https://www.fci.gov.in TTFB: 1.80s DOMContentLoaded: 3.38s firstPaint: 3.32s FCP: 3.32s LCP: 13.00s Load: 13.76s TBT: 246ms CLS:0.5260
[2023-03-23 14:20:23] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:20:24] INFO: Testing url https://www.fci.gov.in iteration 3
[2023-03-23 14:20:44] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:20:46] INFO: https://www.fci.gov.in TTFB: 1.80s DOMContentLoaded: 3.44s firstPaint: 3.38s FCP: 3.38s LCP: 10.92s Load: 18.55s TBT: 251ms CLS:0.5206
[2023-03-23 14:20:46] INFO: https://www.fci.gov.in 97 requests, TTFB: 1.80s (σ107.00ms 6.2%), firstPaint: 3.32s (σ237.00ms 7.5%), FCP: 3.32s (σ237.00ms 7.5%), DOMContentLoaded: 3.38s (σ210.00ms 6.4%), LCP: 11.04s (σ955.00ms 8.2%), CLS: 0.526 (σ0.18 27.3%), TBT: 251ms (σ31.00ms 11.6%), Load: 13.76s (σ7.86s 73.0%) (3 runs)
[2023-03-23 14:20:46] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\fci.gov.in\Edge\2023-03-23_14-19-36
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 14:20:48] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:20:49] INFO: Testing url https://www.tob.ru iteration 1
[2023-03-23 14:21:08] INFO: https://www.tob.ru TTFB: 2.35s DOMContentLoaded: 4.38s firstPaint: 3.62s FCP: 3.62s LCP: 6.18s Load: 7.75s TBT: 210ms CLS:0.1157
[2023-03-23 14:21:09] INFO: Testing url https://www.tob.ru iteration 2
[2023-03-23 14:21:27] INFO: https://www.tob.ru TTFB: 1.96s DOMContentLoaded: 3.96s firstPaint: 3.24s FCP: 3.24s LCP: 5.68s Load: 7.33s TBT: 154ms CLS:0.1192
[2023-03-23 14:21:28] INFO: Testing url https://www.tob.ru iteration 3
[2023-03-23 14:21:46] INFO: https://www.tob.ru TTFB: 1.51s DOMContentLoaded: 3.17s firstPaint: 2.77s FCP: 2.77s LCP: 5.86s Load: 6.85s TBT: 72ms CLS:0.4142
[2023-03-23 14:21:46] INFO: https://www.tob.ru 156 requests, TTFB: 1.96s (σ343.00ms 17.7%), firstPaint: 3.24s (σ350.00ms 10.9%), FCP: 3.24s (σ350.00ms 10.9%), DOMContentLoaded: 3.96s (σ500.00ms 13.1%), LCP: 5.86s (σ210.00ms 3.6%), CLS: 0.1192 (σ0.14 64.7%), TBT: 154ms (σ57.00ms 39.0%), Load: 7.33s (σ368.00ms 5.0%) (3 runs)
[2023-03-23 14:21:46] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\tob.ru\Chrome\2023-03-23_14-20-47
[2023-03-23 14:21:47] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:21:49] INFO: Testing url https://www.tob.ru iteration 1
[2023-03-23 14:22:09] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:22:09] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:22:19] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 14:22:19] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:22:20] INFO: https://www.tob.ru 
[2023-03-23 14:22:22] INFO: Testing url https://www.tob.ru iteration 2
[2023-03-23 14:22:42] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:22:42] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:22:52] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 14:22:52] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:22:53] INFO: https://www.tob.ru 
[2023-03-23 14:22:55] INFO: Testing url https://www.tob.ru iteration 3
[2023-03-23 14:23:15] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:23:15] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:23:25] ERROR: Got an error from HAR Export Trigger {"error":"ReferenceError: HAR is not defined"}
[2023-03-23 14:23:25] ERROR: TypeError: Cannot read properties of undefined (reading 'log')
    at Firefox.afterPageCompleteCheck (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/firefox/webdriver/firefox.js:173:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.stop (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:298:17)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:23:26] INFO: https://www.tob.ru 
[2023-03-23 14:23:26] INFO: https://www.tob.ru 
[2023-03-23 14:23:26] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\tob.ru\Firefox\2023-03-23_14-21-46
[2023-03-23 14:23:27] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:23:27] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:23:28] INFO: Testing url https://www.tob.ru iteration 1
[2023-03-23 14:23:46] INFO: https://www.tob.ru TTFB: 1.40s DOMContentLoaded: 3.39s firstPaint: 2.65s FCP: 2.65s LCP: 5.45s Load: 6.70s TBT: 316ms CLS:0.3577
[2023-03-23 14:23:46] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:23:46] INFO: Testing url https://www.tob.ru iteration 2
[2023-03-23 14:24:05] INFO: https://www.tob.ru TTFB: 1.52s DOMContentLoaded: 3.18s firstPaint: 2.76s FCP: 2.76s LCP: 5.38s Load: 6.74s TBT: 239ms CLS:0.3862
[2023-03-23 14:24:05] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:24:05] INFO: Testing url https://www.tob.ru iteration 3
[2023-03-23 14:24:23] INFO: https://www.tob.ru TTFB: 1.39s DOMContentLoaded: 3.06s firstPaint: 2.63s FCP: 2.63s LCP: 5.29s Load: 6.63s TBT: 237ms CLS:0.4557
[2023-03-23 14:24:23] INFO: https://www.tob.ru 155 requests, TTFB: 1.40s (σ57.00ms 4.0%), firstPaint: 2.65s (σ55.00ms 2.1%), FCP: 2.65s (σ55.00ms 2.1%), DOMContentLoaded: 3.18s (σ136.00ms 4.2%), LCP: 5.38s (σ65.00ms 1.2%), CLS: 0.3862 (σ0.04 10.3%), TBT: 239ms (σ37.00ms 13.9%), Load: 6.70s (σ43.00ms 0.6%) (3 runs)
[2023-03-23 14:24:23] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\tob.ru\Edge\2023-03-23_14-23-26
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 14:24:25] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:24:26] INFO: Testing url https://www.expertscube.com iteration 1
[2023-03-23 14:24:38] INFO: https://www.expertscube.com TTFB: 819ms DOMContentLoaded: 1.00s firstPaint: 1.04s FCP: 1.04s LCP: 1.12s Load: 1.13s CLS:0.0054
[2023-03-23 14:24:39] INFO: Testing url https://www.expertscube.com iteration 2
[2023-03-23 14:24:50] INFO: https://www.expertscube.com TTFB: 749ms DOMContentLoaded: 842ms firstPaint: 883ms FCP: 883ms LCP: 956ms Load: 970ms CLS:0.0054
[2023-03-23 14:24:51] INFO: Testing url https://www.expertscube.com iteration 3
[2023-03-23 14:25:03] INFO: https://www.expertscube.com TTFB: 811ms DOMContentLoaded: 1.08s firstPaint: 1.08s FCP: 1.08s LCP: 1.20s Load: 1.20s CLS:0.0054
[2023-03-23 14:25:03] INFO: https://www.expertscube.com 10 requests, TTFB: 811ms (σ31.00ms 3.9%), firstPaint: 1.04s (σ85.00ms 8.5%), FCP: 1.04s (σ85.00ms 8.5%), DOMContentLoaded: 1.00s (σ100.00ms 10.2%), LCP: 1.12s (σ100.00ms 9.2%), CLS: 0.0054 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.13s (σ98.00ms 8.9%) (3 runs)
[2023-03-23 14:25:03] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\expertscube.com\Chrome\2023-03-23_14-24-24
[2023-03-23 14:25:04] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:25:06] INFO: Testing url https://www.expertscube.com iteration 1
[2023-03-23 14:25:26] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:25:26] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:25:29] INFO: https://www.expertscube.com TTFB: 865ms DOMContentLoaded: 1.15s firstPaint: 1.19s FCP: 1.18s 
[2023-03-23 14:25:31] INFO: Testing url https://www.expertscube.com iteration 2
[2023-03-23 14:25:52] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:25:52] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:25:55] INFO: https://www.expertscube.com TTFB: 886ms DOMContentLoaded: 1.24s firstPaint: 1.28s FCP: 1.26s 
[2023-03-23 14:25:57] INFO: Testing url https://www.expertscube.com iteration 3
[2023-03-23 14:26:17] INFO: The page did not finished loading in 15000 ms. You can adjust the timeout by setting the --maxLoadTime option (in ms).
[2023-03-23 14:26:17] INFO: Waiting on har-export-trigger to collect the HAR
[2023-03-23 14:26:21] INFO: https://www.expertscube.com TTFB: 780ms DOMContentLoaded: 1.09s firstPaint: 1.14s FCP: 1.11s 
[2023-03-23 14:26:21] INFO: https://www.expertscube.com 11 requests, TTFB: 865ms (σ46.00ms 5.4%), firstPaint: 1.19s (σ59.00ms 4.9%), FCP: 1.18s (σ61.00ms 5.2%), DOMContentLoaded: 1.15s (σ62.00ms 5.3%), Load: 0ms (σ0.00ms 0%) (3 runs)
[2023-03-23 14:26:21] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\expertscube.com\Firefox\2023-03-23_14-25-03
[2023-03-23 14:26:22] INFO: Running tests using Edge - 3 iteration(s)
[2023-03-23 14:26:22] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:26:23] INFO: Testing url https://www.expertscube.com iteration 1
[2023-03-23 14:26:35] INFO: https://www.expertscube.com TTFB: 770ms DOMContentLoaded: 896ms firstPaint: 942ms FCP: 942ms LCP: 1.05s Load: 1.07s CLS:0.0059
[2023-03-23 14:26:35] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:26:35] INFO: Testing url https://www.expertscube.com iteration 2
[2023-03-23 14:26:47] INFO: https://www.expertscube.com TTFB: 800ms DOMContentLoaded: 905ms firstPaint: 941ms FCP: 941ms LCP: 1.03s Load: 1.04s CLS:0.0059
[2023-03-23 14:26:47] INFO: Using Edge is experimental at the moment and use the same configuration as for Chrome
[2023-03-23 14:26:48] INFO: Testing url https://www.expertscube.com iteration 3
[2023-03-23 14:27:00] INFO: https://www.expertscube.com TTFB: 786ms DOMContentLoaded: 1.03s firstPaint: 1.07s FCP: 1.07s LCP: 1.16s Load: 1.16s CLS:0.0059
[2023-03-23 14:27:00] INFO: https://www.expertscube.com 10 requests, TTFB: 786ms (σ12.00ms 1.6%), firstPaint: 942ms (σ61.00ms 6.2%), FCP: 942ms (σ61.00ms 6.2%), DOMContentLoaded: 905ms (σ62.00ms 6.6%), LCP: 1.05s (σ56.00ms 5.2%), CLS: 0.0059 (σ0.00 0%), TBT: 0ms (σ0.00ms 0%), Load: 1.07s (σ53.00ms 4.9%) (3 runs)
[2023-03-23 14:27:00] INFO: Wrote data to ..\..\..\..\..\Fingerprinting\expertscube.com\Edge\2023-03-23_14-26-21
browsertime.js [options] <url>/<scriptFile>

timeouts
      --timeouts.browserStart                      Timeout when waiting for browser to start, in milliseconds  [number] [default: 60000]
      --timeouts.pageLoad                          Timeout when waiting for url to load, in milliseconds  [number] [default: 300000]
      --timeouts.script                            Timeout when running browser scripts, in milliseconds  [number] [default: 120000]
      --timeouts.pageCompleteCheck, --maxLoadTime  Timeout when waiting for page to complete loading, in milliseconds  [number] [default: 120000]

chrome
      --chrome.args                                              Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). To add multiple arguments to Chrome, repeat --chrome.args once per argument.
      --chrome.binaryPath                                        Path to custom Chrome binary (e.g. Chrome Canary). On OS X, the path should be to the binary inside the app bundle, e.g. "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
      --chrome.chromedriverPath                                  Path to custom ChromeDriver binary. Make sure to use a ChromeDriver version that's compatible with the version of Chrome you're using
      --chrome.chromedriverPort                                  Specify "--port" args for chromedriver prcocess  [number]
      --chrome.mobileEmulation.deviceName                        Name of device to emulate. Works only standalone (see list in Chrome DevTools, but add phone like 'iPhone 6'). This will override your userAgent string.
      --chrome.mobileEmulation.width                             Width in pixels of emulated mobile screen (e.g. 360)  [number]
      --chrome.mobileEmulation.height                            Height in pixels of emulated mobile screen (e.g. 640)  [number]
      --chrome.mobileEmulation.pixelRatio                        Pixel ratio of emulated mobile screen (e.g. 2.0)
      --chrome.android.package                                   Run Chrome on your Android device. Set to com.android.chrome for default Chrome version. You need to have adb installed to make this work.
      --chrome.android.activity                                  Name of the Activity hosting the WebView.
      --chrome.android.process                                   Process name of the Activity hosting the WebView. If not given, the process name is assumed to be the same as chrome.android.package.
      --chrome.android.deviceSerial                              Choose which device to use. If you do not set it, first device will be used.
      --chrome.traceCategories                                   A comma separated list of Tracing event categories to include in the Trace log. Default no trace categories is collected.  [string]
      --chrome.traceCategory                                     Add a trace category to the default ones. Use --chrome.traceCategory multiple times if you want to add multiple categories. Example: --chrome.traceCategory disabled-by-default-v8.cpu_profiler  [string]
      --chrome.enableTraceScreenshots, --enableTraceScreenshots  Include screenshots in the trace log (enabling the trace category disabled-by-default-devtools.screenshot).  [boolean]
      --chrome.enableChromeDriverLog                             Log Chromedriver communication to a log file.  [boolean]
      --chrome.enableVerboseChromeDriverLog                      Log verboose Chromedriver communication to a log file.  [boolean]
      --chrome.timeline, --chrome.trace                          Collect the timeline data. Drag and drop the JSON in your Chrome detvools timeline panel or check out the CPU metrics in the Browsertime.json  [boolean]
      --chrome.collectPerfLog                                    Collect performance log from Chrome with Page and Network events and save to disk.  [boolean]
      --chrome.collectNetLog                                     Collect network log from Chrome and save to disk.  [boolean]
      --chrome.netLogCaptureMode                                 Choose capture mode for Chromes netlog.  [choices: "Default", "IncludeSensitive", "Everything"] [default: "IncludeSensitive"]
      --chrome.collectConsoleLog                                 Collect Chromes console log and save to disk.  [boolean]
      --chrome.appendToUserAgent                                 Append to the user agent.  [string]
      --chrome.noDefaultOptions                                  Prevent Browsertime from setting its default options for Chrome  [boolean]
      --chrome.cleanUserDataDir                                  If you use --user-data-dir as an argument to Chrome and want to clean that directory between each iteration you should use --chrome.cleanUserDataDir true.  [boolean]
      --chrome.CPUThrottlingRate                                 Enables CPU throttling to emulate slow CPUs. Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)  [number]
      --chrome.includeResponseBodies                             Include response bodies in the HAR file.  [choices: "none", "all", "html"] [default: "none"]
      --chrome.cdp.performance                                   Collect Chrome perfromance metrics from Chrome DevTools Protocol  [boolean] [default: true]
      --chrome.blockDomainsExcept, --blockDomainsExcept          Block all domains except this domain. Use it multiple time to keep multiple domains. You can also wildcard domains like *.sitespeed.io. Use this when you wanna block out all third parties.
      --chrome.ignoreCertificateErrors                           Make Chrome ignore certificate errors.  Defaults to true.  [boolean] [default: true]

android
      --android.powerTesting, --androidPower                                                       Enables android power testing - charging must be disabled for this.(You have to disable charging yourself for this - it depends on the phone model).  [boolean]
      --android.ignoreShutdownFailures, --ignoreShutdownFailures                                   If set, shutdown failures will be ignored on Android.  [boolean] [default: false]
      --android.rooted, --androidRooted                                                            If your phone is rooted you can use this to set it up following Mozillas best practice for stable metrics.  [boolean] [default: false]
      --android.batteryTemperatureLimit, --androidBatteryTemperatureLimit                          Do the battery temperature need to be below a specific limit before we start the test?
      --android.batteryTemperatureWaitTimeInSeconds, --androidBatteryTemperatureWaitTimeInSeconds  How long time to wait (in seconds) if the androidBatteryTemperatureWaitTimeInSeconds is not met before the next try  [default: 120]
      --android.batteryTemperatureReboot, --androidBatteryTemperatureReboot                        If your phone does not get the minimum temperature aftet the wait time, reboot the phone.  [boolean] [default: false]
      --android.pretestPowerPress, --androidPretestPowerPress                                      Press the power button on the phone before a test starts.  [boolean] [default: false]
      --android.pretestPressHomeButton, --androidPretestPressHomeButton                            Press the home button on the phone before a test starts.  [boolean] [default: false]
      --android.verifyNetwork, --androidVerifyNetwork                                              Before a test start, verify that the device has a Internet connection by pinging 8.8.8.8 (or a configurable domain with --androidPingAddress)  [boolean] [default: false]
      --android.gnirehtet, --gnirehtet                                                             Start gnirehtet and reverse tethering the traffic from your Android phone.  [boolean] [default: false]

firefox
      --firefox.binaryPath                      Path to custom Firefox binary (e.g. Firefox Nightly). On OS X, the path should be to the binary inside the app bundle, e.g. /Applications/Firefox.app/Contents/MacOS/firefox-bin
      --firefox.geckodriverPath                 Path to custom geckodriver binary. Make sure to use a geckodriver version that's compatible with the version of Firefox (Gecko) you're using
      --firefox.geckodriverArgs                 Flags passed in to Geckodriver see https://firefox-source-docs.mozilla.org/testing/geckodriver/Flags.html. Use it like --firefox.geckodriverArgs="--marionette-port"  --firefox.geckodriverArgs=1027  [string]
      --firefox.appendToUserAgent               Append to the user agent.  [string]
      --firefox.nightly                         Use Firefox Nightly. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.beta                            Use Firefox Beta. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.developer                       Use Firefox Developer. Works on OS X. For Linux you need to set the binary path.  [boolean]
      --firefox.preference                      Extra command line arguments to pass Firefox preferences by the format key:value To add multiple preferences, repeat --firefox.preference once per argument.
      --firefox.args                            Extra command line arguments to pass to the Firefox process (e.g. --MOZ_LOG). To add multiple arguments to Firefox, repeat --firefox.args once per argument.
      --firefox.includeResponseBodies           Include response bodies in HAR  [choices: "none", "all", "html"] [default: "none"]
      --firefox.appconstants                    Include Firefox AppConstants information in the results  [boolean] [default: false]
      --firefox.acceptInsecureCerts             Accept insecure certs  [boolean]
      --firefox.windowRecorder                  Use the internal compositor-based Firefox window recorder to emit PNG files for each frame that is a meaningful change.  The PNG output will further be merged into a variable frame rate video for analysis. Use this instead of ffmpeg to record a video (you still need the --video flag).  [boolean] [default: false]
      --firefox.memoryReport                    Measure firefox resident memory after each iteration.  [boolean] [default: false]
      --firefox.memoryReportParams.minizeFirst  Force a collection before dumping and measuring the memory report.  [boolean] [default: false]
      --firefox.geckoProfiler                   Collect a profile using the internal gecko profiler  [boolean] [default: false]
      --firefox.geckoProfilerParams.features    Enabled features during gecko profiling  [string] [default: "js,stackwalk,leaf"]
      --firefox.geckoProfilerParams.threads     Threads to profile.  [string] [default: "GeckoMain,Compositor,Renderer"]
      --firefox.geckoProfilerParams.interval    Sampling interval in ms.  Defaults to 1 on desktop, and 4 on android.  [number]
      --firefox.geckoProfilerParams.bufferSize  Buffer size in elements. Default is ~90MB.  [number] [default: 13107200]
      --firefox.perfStats                       Collect gecko performance statistics as measured internally by the firefox browser. See https://searchfox.org/mozilla-central/source/tools/performance/PerfStats.h#24-33  [boolean] [default: false]
      --firefox.perfStatsParams.mask            Mask to decide which features to enable  [number] [default: 4294967295]
      --firefox.collectMozLog                   Collect the MOZ HTTP log (by default). See --firefox.setMozLog if you need to specify the logs you wish to gather.  [boolean]
      --firefox.setMozLog                       Use in conjunction with firefox.collectMozLog to set MOZ_LOG to something specific. Without this, the HTTP logs will be collected by default  [default: "timestamp,nsHttp:5,cache2:5,nsSocketTransport:5,nsHostResolver:5"]
      --firefox.disableBrowsertimeExtension     Disable installing the browsertime extension.  [boolean]
      --firefox.noDefaultPrefs                  Prevents browsertime from setting its default preferences.  [boolean] [default: false]
      --firefox.disableSafeBrowsing             Disable safebrowsing.  [boolean] [default: true]
      --firefox.disableTrackingProtection       Disable Tracking Protection.  [boolean] [default: true]
      --firefox.android.package                 Run Firefox or a GeckoView-consuming App on your Android device. Set to org.mozilla.geckoview_example for default Firefox version. You need to have adb installed to make this work.
      --firefox.android.activity                Name of the Activity hosting the GeckoView.
      --firefox.android.deviceSerial            Choose which device to use. If you do not set it, first device will be used.
      --firefox.android.intentArgument          Configure how the Android intent is launched.  Passed through to `adb shell am start ...`; follow the format at https://developer.android.com/studio/command-line/adb#IntentSpec. To add multiple arguments, repeat --firefox.android.intentArgument once per argument.
      --firefox.profileTemplate                 Profile template directory that will be cloned and used as the base of each profile each instance of Firefox is launched against.  Use this to pre-populate databases with certificates, tracking protection lists, etc.

selenium
      --selenium.url  URL to a running Selenium server (e.g. to run a browser on another machine).

video
      --videoParams.framerate          Frames per second  [default: 30]
      --videoParams.crf                Constant rate factor see https://trac.ffmpeg.org/wiki/Encode/H.264#crf  [default: 23]
      --videoParams.addTimer           Add timer and metrics to the video.  [boolean] [default: true]
      --videoParams.debug              Turn on debug to record a video with all pre/post and scripts/URLS you test in one iteration. Visual Metrics will then automatically be disabled.  [boolean] [default: false]
      --videoParams.keepOriginalVideo  Keep the original video. Use it when you have a Visual Metrics bug and want to create an issue at GitHub  [boolean] [default: false]
      --videoParams.thumbsize          The maximum size of the thumbnail in the filmstrip. Default is 400 pixels in either direction. If videoParams.filmstripFullSize is used that setting overrides this.  [default: 400]
      --videoParams.filmstripFullSize  Keep original sized screenshots. Will make the run take longer time  [boolean] [default: false]
      --videoParams.filmstripQuality   The quality of the filmstrip screenshots. 0-100.  [default: 75]
      --videoParams.createFilmstrip    Create filmstrip screenshots.  [boolean] [default: true]
      --videoParams.nice               Use nice when running FFMPEG during the run. A value from -20 to 19  https://linux.die.net/man/1/nice  [default: 0]
      --videoParams.convert            Convert the original video to a viewable format (for most video players). Turn that off to make a faster run.  [boolean] [default: true]
      --videoParams.threads            Number of threads to use for video recording. Default is determined by ffmpeg.  [default: 0]

edge
      --edge.edgedriverPath  Path to custom msedgedriver version (need to match your Egde version).
      --edge.binaryPath      Path to custom Edge binary

safari
      --safari.ios                   Use Safari on iOS. You need to choose browser Safari and iOS to run on iOS.  [boolean] [default: false]
      --safari.deviceName            Set the device name. Device names for connected devices are shown in iTunes.
      --safari.deviceUDID            Set the device UDID. If Xcode is installed, UDIDs for connected devices are available via the output of "xcrun simctl list devices" and in the Device and Simulators window (accessed in Xcode via "Window > Devices and Simulators")
      --safari.deviceType            Set the device type. If the value of safari:deviceType is `iPhone`, safaridriver will only create a session using an iPhone device or iPhone simulator. If the value of safari:deviceType is `iPad`, safaridriver will only create a session using an iPad device or iPad simulator.
      --safari.useTechnologyPreview  Use Safari Technology Preview  [boolean] [default: false]
      --safari.diagnose              When filing a bug report against safaridriver, it is highly recommended that you capture and include diagnostics generated by safaridriver. Diagnostic files are saved to ~/Library/Logs/com.apple.WebDriver/
      --safari.useSimulator          If the value of useSimulator is true, safaridriver will only use iOS Simulator hosts. If the value of safari:useSimulator is false, safaridriver will not use iOS Simulator hosts. NOTE: An Xcode installation is required in order to run WebDriver tests on iOS Simulator hosts.  [boolean] [default: false]

Screenshot
      --screenshot                             Save one screenshot per iteration.  [boolean] [default: false]
      --screenshotLCP                          Save one screenshot per iteration that shows the largest contentful paint element (if the browser supports LCP).  [boolean] [default: false]
      --screenshotLS                           Save one screenshot per iteration that shows the layout shift elements (if the browser supports layout shift).  [boolean] [default: false]
      --screenshotParams.type                  Set the file type of the screenshot  [choices: "png", "jpg"] [default: "jpg"]
      --screenshotParams.png.compressionLevel  zlib compression level  [default: 6]
      --screenshotParams.jpg.quality           Quality of the JPEG screenshot. 1-100  [default: 80]
      --screenshotParams.maxSize               The max size of the screenshot (width and height).  [default: 2000]

proxy
      --proxy.pac     Proxy auto-configuration (URL)  [string]
      --proxy.ftp     Ftp proxy (host:port)  [string]
      --proxy.http    Http proxy (host:port)  [string]
      --proxy.https   Https proxy (host:port)  [string]
      --proxy.bypass  Comma separated list of hosts to connect to directly, bypassing other proxies for that host  [string]

connectivity
  -c, --connectivity.profile                              The connectivity profile.  [choices: "4g", "3g", "3gfast", "3gslow", "3gem", "2g", "cable", "native", "custom"] [default: "native"]
      --connectivity.down, --connectivity.downstreamKbps  This option requires --connectivity.profile be set to "custom".
      --connectivity.up, --connectivity.upstreamKbps      This option requires --connectivity.profile be set to "custom".
      --connectivity.rtt, --connectivity.latency          This option requires --connectivity.profile be set to "custom".
      --connectivity.variance                             This option requires --connectivity.engine be set to "throttle". It will add a variance to the rtt between each run. --connectivity.variance 2 means it will run with a random variance of max 2% between runs.
      --connectivity.alias                                Give your connectivity profile a custom name
      --connectivity.engine                               The engine for connectivity. Throttle works on Mac and tc based Linux. For mobile you can use Humble if you have a Humble setup. Use external if you set the connectivity outside of Browsertime. The best way do to this is described in https://github.com/sitespeedio/browsertime#connectivity.  [choices: "external", "throttle", "humble"] [default: "external"]
      --connectivity.throttle.localhost                   Add latency/delay on localhost. Perfect for testing with WebPageReplay  [boolean] [default: false]
      --connectivity.humble.url                           The path to your Humble instance. For example http://raspberrypi:3000  [string]

debug
      --debug  Run Browsertime in debug mode.  [boolean] [default: false]

Options:
      --cpu                                        Easy way to enable both chrome.timeline for Chrome and geckoProfile for Firefox  [boolean]
      --video                                      Record a video and store the video. Set it to false to remove the video that is created by turning on visualMetrics. To remove fully turn off video recordings, make sure to set video and visualMetrics to false. Requires FFMpeg to be installed.  [boolean]
      --visualMetrics                              Collect Visual Metrics like First Visual Change, SpeedIndex, Perceptual Speed Index and Last Visual Change. Requires FFMpeg and Python dependencies  [boolean]
      --visualElements, --visuaElements            Collect Visual Metrics from elements. Works only with --visualMetrics turned on. By default you will get visual metrics from the largest image within the view port and the largest h1. You can also configure to pickup your own defined elements with --scriptInput.visualElements  [boolean]
      --visualMetricsPerceptual                    Collect Perceptual Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsContentful                    Collect Contentful Speed Index when you run --visualMetrics.  [boolean]
      --visualMetricsPortable                      Use the portable visual-metrics processing script (no ImageMagick dependencies).  [boolean] [default: true]
      --scriptInput.visualElements                 Include specific elements in visual elements. Give the element a name and select it with document.body.querySelector. Use like this: --scriptInput.visualElements name:domSelector see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors. Add multiple instances to measure multiple elements. Visual Metrics will use these elements and calculate when they are visible and fully rendered.
      --scriptInput.longTask, --minLongTaskLength  Set the minimum length of a task to be categorised as a CPU Long Task. It can never be smaller than 50. The value is in ms and only works in Chromium browsers at the moment.  [number] [default: 50]
  -b, --browser                                    Specify browser. Safari only works on OS X/iOS. Edge only work on OS that supports Edge.  [choices: "chrome", "firefox", "edge", "safari"] [default: "chrome"]
      --android                                    Short key to use Android. Defaults to use com.android.chrome unless --browser is specified.  [boolean] [default: false]
      --processStartTime                           Capture browser process start time (in milliseconds). Android only for now.  [boolean] [default: false]
      --pageCompleteCheck                          Supply a JavaScript (inline or JavaScript file) that decides when the browser is finished loading the page and can start to collect metrics. The JavaScript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd. By default the tests ends 2 seconds after loadEventEnd. Also checkout --pageCompleteCheckInactivity and --pageCompleteCheckPollTimeout
      --pageCompleteWaitTime                       How long time you want to wait for your pageComplteteCheck to finish, after it is signaled to closed. Extra parameter passed on to your pageCompleteCheck.  [default: 8000]
      --pageCompleteCheckInactivity                Alternative way to choose when to end your test. This will wait for 2 seconds of inactivity that happens after loadEventEnd.  [boolean] [default: false]
      --pageCompleteCheckPollTimeout               The time in ms to wait for running the page complete check the next time.  [number] [default: 1500]
      --pageCompleteCheckStartWait                 The time in ms to wait for running the page complete check for the first time. Use this when you have a pageLoadStrategy set to none  [number] [default: 5000]
      --pageLoadStrategy                           Set the strategy to waiting for document readiness after a navigation event. After the strategy is ready, your pageCompleteCheck will start runninhg.  [string] [choices: "eager", "none", "normal"] [default: "none"]
  -n, --iterations                                 Number of times to test the url (restarting the browser between each test)  [number] [default: 3]
      --prettyPrint                                Enable to print json/har with spaces and indentation. Larger files, but easier on the eye.  [boolean] [default: false]
      --delay                                      Delay between runs, in milliseconds  [number] [default: 0]
      --timeToSettle                               Extra time added for the browser to settle before starting to test a URL. This delay happens after the browser was opened and before the navigation to the URL  [number] [default: 0]
      --webdriverPageload                          Use webdriver.get to initialize the page load instead of window.location.  [boolean] [default: false]
  -r, --requestheader                              Request header that will be added to the request. Add multiple instances to add multiple request headers. Works for Firefox and Chrome. Use the following format key:value
      --cookie                                     Cookie that will be added to the request. Add multiple instances to add multiple request cookies. Works for Firefox and Chrome. Use the following format cookieName=cookieValue
      --injectJs                                   Inject JavaScript into the current page at document_start. Works for Firefox and Chrome. More info: https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts
      --block                                      Domain to block or URL or URL pattern to block. If you use Chrome you can also use --blockDomainsExcept (that is more performant). Works in Chrome/Edge. For Firefox you can only block domains.
      --percentiles                                The percentile values within the data browsertime will calculate and report. This argument uses Yargs arrays and you you to set them correctly it is recommended to use a configuraration file instead.  [array] [default: [0,10,90,99,100]]
      --decimals                                   The decimal points browsertime statistics round to.  [number] [default: 0]
      --iqr                                        Use IQR, or Inter Quartile Range filtering filters data based on the spread of the data. See  https://en.wikipedia.org/wiki/Interquartile_range. In some cases, IQR filtering may not filter out anything. This can happen if the acceptable range is wider than the bounds of your dataset.  [boolean] [default: false]
      --cacheClearRaw                              Use internal browser functionality to clear browser cache between runs instead of only using Selenium.  [boolean] [default: false]
      --basicAuth                                  Use it if your server is behind Basic Auth. Format: username@password (Only Chrome and Firefox at the moment).
      --preScript, --setUp                         Selenium script(s) to run before you test your URL/script. They will run outside of the analyse phase. Note that --preScript can be passed multiple times.
      --postScript, --tearDown                     Selenium script(s) to run after you test your URL. They will run outside of the analyse phase. Note that --postScript can be passed multiple times.
      --script                                     Add custom Javascript to run after the page has finished loading to collect metrics. If a single js file is specified, it will be included in the category named "custom" in the output json. Pass a folder to include all .js scripts in the folder, and have the folder name be the category. Note that --script can be passed multiple times.
      --userAgent                                  Override user agent
      --appendToUserAgent                          Append a String to the user agent. Works in Chrome/Edge and Firefox.
  -q, --silent                                     Only output info in the logs, not to the console. Enter twice to suppress summary line.  [count]
  -o, --output                                     Specify file name for Browsertime data (ex: 'browsertime'). Unless specified, file will be named browsertime.json
      --har                                        Specify file name for .har file (ex: 'browsertime'). Unless specified, file will be named browsertime.har
      --skipHar                                    Pass --skipHar to not collect a HAR file.  [boolean]
      --gzipHar                                    Pass --gzipHar to gzip the HAR file  [boolean]
      --config                                     Path to JSON config file. You can also use a .browsertime.json file that will automatically be found by Browsertime using find-up.
      --viewPort                                   Size of browser window WIDTHxHEIGHT or "maximize". Note that "maximize" is ignored for xvfb.
      --resultDir                                  Set result directory for the files produced by Browsertime
      --useSameDir                                 Store all files in the same structure and do not use the path structure released in 4.0. Use this only if you are testing ONE URL.
      --xvfb                                       Start xvfb before the browser is started  [boolean] [default: false]
      --xvfbParams.display                         The display used for xvfb  [default: 99]
      --tcpdump                                    Collect a tcpdump for each tested URL.  [boolean] [default: false]
      --tcpdumpPacketBuffered                      Use together with --tcpdump to save each packet directly to the file, instead of buffering.  [boolean] [default: false]
      --urlAlias                                   Use an alias for the URL. You need to pass on the same amount of alias as URLs. The alias is used as the name of the URL and used for filepath. Pass on multiple --urlAlias for multiple alias/URLs. You can also add alias direct in your script.  [string]
      --preURL, --warmLoad                         A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the browser cache.
      --preURLDelay, --warmLoadDealy               Delay between preURL and the URL you want to test (in milliseconds)  [default: 1500]
      --userTimingWhitelist                        All userTimings are captured by default this option takes a regex that will whitelist which userTimings to capture in the results.
      --headless                                   Run the browser in headless mode. Works for Firefox and Chrome.  [boolean] [default: false]
      --flushDNS                                   Flush DNS between runs, works on Mac OS and Linux. Your user needs sudo rights to be able to flush the DNS.  [boolean] [default: false]
      --extension                                  Path to a WebExtension to be installed in the browser. Note that --extension can be passed multiple times.
      --spa                                        Convenient parameter to use if you test a SPA application: will automatically wait for X seconds after last network activity and use hash in file names. Read more: https://www.sitespeed.io/documentation/sitespeed.io/spa/  [boolean] [default: false]
      --cjs                                        Load scripting files that ends with .js as common js. Default (false) loads files as esmodules.  [boolean] [default: false]
      --browserRestartTries                        If the browser fails to start, you can retry to start it this amount of times.  [number] [default: 3]
      --preWarmServer                              Do pre test requests to the URL(s) that you want to test that is not measured. Do that to make sure your web server is ready to serve. The pre test requests is done with another browser instance that is closed after pre testing is done.  [boolean] [default: false]
      --preWarmServerWaitTime                      The wait time before you start the real testing after your pre-cache request.  [number] [default: 5000]
  -h, --help                                       Show help  [boolean]
  -V, --version                                    Show version number  [boolean]

Invalid values:
  Argument: browser, Given: "brave", Choices: "chrome", "firefox", "edge", "safari"
Footer : The term 'Footer' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\17862\Documents\GitHub\ip-fingerprinting\crawl_brave.ps1:10 char:1
+ Footer
+ ~~~~~~
    + CategoryInfo          : ObjectNotFound: (Footer:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
[2023-03-23 14:27:02] INFO: Running tests using Chrome - 3 iteration(s)
[2023-03-23 14:27:02] INFO: Testing url https://www.takaratomymall.jp iteration 1
[2023-03-23 14:27:12] INFO: URL failed to load, trying 5 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:13] INFO: URL failed to load, trying 4 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:14] INFO: URL failed to load, trying 3 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:15] INFO: URL failed to load, trying 2 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:16] INFO: URL failed to load, trying 1 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:17] INFO: URL failed to load, trying 0 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:17] ERROR: Could not load URL https://www.takaratomymall.jp UrlLoadError: Could not load https://www.takaratomymall.jp is the web page down?
    at SeleniumRunner.loadAndWait (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/seleniumRunner.js:295:17)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.start (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:232:9)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:27:17] ERROR: UrlLoadError: Failed to load https://www.takaratomymall.jp
    at SeleniumRunner.loadAndWait (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/seleniumRunner.js:336:17)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.start (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:232:9)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:27:17] INFO: https://www.takaratomymall.jp 
[2023-03-23 14:27:18] INFO: Testing url https://www.takaratomymall.jp iteration 2
[2023-03-23 14:27:27] INFO: URL failed to load, trying 5 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:28] INFO: URL failed to load, trying 4 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:29] INFO: URL failed to load, trying 3 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:30] INFO: URL failed to load, trying 2 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:31] INFO: URL failed to load, trying 1 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:32] INFO: URL failed to load, trying 0 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:32] ERROR: Could not load URL https://www.takaratomymall.jp UrlLoadError: Could not load https://www.takaratomymall.jp is the web page down?
    at SeleniumRunner.loadAndWait (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/seleniumRunner.js:295:17)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.start (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:232:9)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:27:32] ERROR: UrlLoadError: Failed to load https://www.takaratomymall.jp
    at SeleniumRunner.loadAndWait (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/seleniumRunner.js:336:17)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.start (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:232:9)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:27:32] INFO: https://www.takaratomymall.jp 
[2023-03-23 14:27:33] INFO: Testing url https://www.takaratomymall.jp iteration 3
[2023-03-23 14:27:43] INFO: URL failed to load, trying 5 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:44] INFO: URL failed to load, trying 4 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:45] INFO: URL failed to load, trying 3 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:46] INFO: URL failed to load, trying 2 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:47] INFO: URL failed to load, trying 1 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:48] INFO: URL failed to load, trying 0 more time(s): Could not load https://www.takaratomymall.jp is the web page down?
[2023-03-23 14:27:48] ERROR: Could not load URL https://www.takaratomymall.jp UrlLoadError: Could not load https://www.takaratomymall.jp is the web page down?
    at SeleniumRunner.loadAndWait (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/seleniumRunner.js:295:17)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.start (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:232:9)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:27:48] ERROR: UrlLoadError: Failed to load https://www.takaratomymall.jp
    at SeleniumRunner.loadAndWait (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/seleniumRunner.js:336:17)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Measure.start (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/command/measure.js:232:9)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/run.js:4:7
    at async Iteration.run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/iteration.js:226:9)
    at async Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:304:20)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:27:48] INFO: https://www.takaratomymall.jp 
[2023-03-23 14:27:48] ERROR: Error running browsertime TypeError: Cannot read properties of undefined (reading 'response')
    at getDocumentRequests (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/support/har/index.js:34:18)
    at getFinalURL (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/support/har/index.js:40:20)
    at getMainDocumentTimings (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/support/har/index.js:200:22)
    at Engine.runByScript (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/lib/core/engine/index.js:339:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async run (file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:104:22)
    at async file:///C:/Users/17862/AppData/Roaming/npm/node_modules/browsertime/bin/browsertime.js:195:1
[2023-03-23 14:27:49] INFO: Running tests using Firefox - 3 iteration(s)
[2023-03-23 14:27:51] INFO: Testing url https://www.takaratomymall.jp iteration 1
